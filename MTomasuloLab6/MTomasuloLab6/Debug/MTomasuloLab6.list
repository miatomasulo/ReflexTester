
MTomasuloLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012f8  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006438  08006438  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006440  08006440  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00025b90  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025c10  20025c10  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a7f5  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000217f  00000000  00000000  0002a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ac0  00000000  00000000  0002ca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007ea  00000000  00000000  0002d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026521  00000000  00000000  0002dd12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010182  00000000  00000000  00054233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc41d  00000000  00000000  000643b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003288  00000000  00000000  001407d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00143a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005128 	.word	0x08005128

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08005128 	.word	0x08005128

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <ApplicationInit>:
 * Button interrupt, Random Number Generator, and LCD display screen.
 * It also adds events to the scheduler so that they may be called elsewhere
 * in the code when appropriate.
 */
void ApplicationInit(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	LTCD__Init();
 80004fc:	f000 f9a0 	bl	8000840 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000500:	2000      	movs	r0, #0
 8000502:	f000 f9fb 	bl	80008fc <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000506:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800050a:	2000      	movs	r0, #0
 800050c:	f000 fb7e 	bl	8000c0c <LCD_Clear>

    RNG_Init();
 8000510:	f001 fd14 	bl	8001f3c <RNG_Init>
    ButtonIntMode();
 8000514:	f000 f828 	bl	8000568 <ButtonIntMode>

    addSchedulerEvent(LEVEL1);
 8000518:	2002      	movs	r0, #2
 800051a:	f001 fd49 	bl	8001fb0 <addSchedulerEvent>
    addSchedulerEvent(LEVEL2);
 800051e:	2004      	movs	r0, #4
 8000520:	f001 fd46 	bl	8001fb0 <addSchedulerEvent>
    addSchedulerEvent(LEVEL3);
 8000524:	2008      	movs	r0, #8
 8000526:	f001 fd43 	bl	8001fb0 <addSchedulerEvent>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}

0800052e <EXTI0_IRQHandler>:
 *
 * When the button is pressed and the code enters the handler, buttonStatus() is called.
 * The following condition is then checked to make sure incrementCounter() and setValidInput()
 * are called at the appropriate time.
 */
void EXTI0_IRQHandler(){
 800052e:	b580      	push	{r7, lr}
 8000530:	af00      	add	r7, sp, #0
	IRQ_disable(EXTI0_IRQ_NUMBER);
 8000532:	2006      	movs	r0, #6
 8000534:	f000 f878 	bl	8000628 <IRQ_disable>

	buttonStatus();
 8000538:	f000 fc2e 	bl	8000d98 <buttonStatus>

	if(getLevelThree() && getValidInput()){
 800053c:	f000 fc38 	bl	8000db0 <getLevelThree>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d008      	beq.n	8000558 <EXTI0_IRQHandler+0x2a>
 8000546:	f000 fc3f 	bl	8000dc8 <getValidInput>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d003      	beq.n	8000558 <EXTI0_IRQHandler+0x2a>

		incrementCounter();
 8000550:	f000 fc52 	bl	8000df8 <incrementCounter>
		setValidInput();
 8000554:	f000 fc44 	bl	8000de0 <setValidInput>

	}

	clearInterruptPendingBit(14);
 8000558:	200e      	movs	r0, #14
 800055a:	f000 f891 	bl	8000680 <clearInterruptPendingBit>
	IRQ_enable(EXTI0_IRQ_NUMBER);
 800055e:	2006      	movs	r0, #6
 8000560:	f000 f836 	bl	80005d0 <IRQ_enable>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <ButtonIntMode>:
/**
 * Configures the button to be used as an interrupt.
 * All values for macros used for pin, mode, speed, pull, and alternate
 * can be identified in the STM32F429 documentation
 */
void ButtonIntMode(){
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonIntConfig = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

	buttonIntConfig.Pin = GPIO_PIN_0;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
	buttonIntConfig.Speed = GPIO_SPEED_FREQ_MEDIUM ;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
	buttonIntConfig.Pull = OUTPUT_PP;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
	buttonIntConfig.Alternate = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
	buttonIntConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800058c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000590:	60bb      	str	r3, [r7, #8]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <ButtonIntMode+0x60>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <ButtonIntMode+0x60>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <ButtonIntMode+0x60>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &buttonIntConfig);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <ButtonIntMode+0x64>)
 80005b4:	f002 f98e 	bl	80028d4 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUMBER);
 80005b8:	2006      	movs	r0, #6
 80005ba:	f002 f970 	bl	800289e <HAL_NVIC_EnableIRQ>
}
 80005be:	bf00      	nop
 80005c0:	3718      	adds	r7, #24
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40020000 	.word	0x40020000

080005d0 <IRQ_enable>:
 * Allows user to enable, disable, set, and clear interrupt bits
 * @param IRQ is the value of the interrupt number
 * @param pin gives the pin value of the external interrupt
 */

void IRQ_enable(uint8_t IRQ){
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	if (IRQ < 32){
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b1f      	cmp	r3, #31
 80005de:	d80a      	bhi.n	80005f6 <IRQ_enable+0x26>
		*NVIC_ISER0  |= (1 << IRQ); //Interrupt Set Enable Register
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <IRQ_enable+0x54>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	79fa      	ldrb	r2, [r7, #7]
 80005e6:	2101      	movs	r1, #1
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <IRQ_enable+0x54>)
 80005f0:	430b      	orrs	r3, r1
 80005f2:	6013      	str	r3, [r2, #0]
	}
	else if (IRQ >= 32){
		int bitmask = (IRQ)%32;
		*NVIC_ISER0 |= (1 << bitmask);
	}
}
 80005f4:	e010      	b.n	8000618 <IRQ_enable+0x48>
	else if (IRQ >= 32){
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2b1f      	cmp	r3, #31
 80005fa:	d90d      	bls.n	8000618 <IRQ_enable+0x48>
		int bitmask = (IRQ)%32;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 031f 	and.w	r3, r3, #31
 8000602:	60fb      	str	r3, [r7, #12]
		*NVIC_ISER0 |= (1 << bitmask);
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <IRQ_enable+0x54>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2101      	movs	r1, #1
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	fa01 f202 	lsl.w	r2, r1, r2
 8000610:	4611      	mov	r1, r2
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <IRQ_enable+0x54>)
 8000614:	430b      	orrs	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100

08000628 <IRQ_disable>:

void IRQ_disable(uint8_t IRQ){
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	if (IRQ < 32){
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b1f      	cmp	r3, #31
 8000636:	d80a      	bhi.n	800064e <IRQ_disable+0x26>
			*NVIC_ICER0  |= (1 << IRQ);//Interrupt Clear Enable Register
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <IRQ_disable+0x54>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	79fa      	ldrb	r2, [r7, #7]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a0d      	ldr	r2, [pc, #52]	; (800067c <IRQ_disable+0x54>)
 8000648:	430b      	orrs	r3, r1
 800064a:	6013      	str	r3, [r2, #0]
		}
		else if (IRQ >= 32){
			int bitmask = (IRQ)%32;
			*NVIC_ICER0 |= (1 << bitmask);
		}
}
 800064c:	e010      	b.n	8000670 <IRQ_disable+0x48>
		else if (IRQ >= 32){
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b1f      	cmp	r3, #31
 8000652:	d90d      	bls.n	8000670 <IRQ_disable+0x48>
			int bitmask = (IRQ)%32;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 031f 	and.w	r3, r3, #31
 800065a:	60fb      	str	r3, [r7, #12]
			*NVIC_ICER0 |= (1 << bitmask);
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <IRQ_disable+0x54>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2101      	movs	r1, #1
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	fa01 f202 	lsl.w	r2, r1, r2
 8000668:	4611      	mov	r1, r2
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <IRQ_disable+0x54>)
 800066c:	430b      	orrs	r3, r1
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000e180 	.word	0xe000e180

08000680 <clearInterruptPendingBit>:
			int bitmask = (IRQ)%32;
			*NVIC_ICPR0 |= (1 << bitmask);
		}
}

void clearInterruptPendingBit(uint8_t pin){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	EXTI_->EXTI_PR |= (1 << pin);
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <clearInterruptPendingBit+0x2c>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	79fa      	ldrb	r2, [r7, #7]
 8000690:	2101      	movs	r1, #1
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <clearInterruptPendingBit+0x2c>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6153      	str	r3, [r2, #20]
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40013c00 	.word	0x40013c00

080006b0 <LCD_GPIO_Init>:

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */


void LCD_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
 80006ba:	4b5a      	ldr	r3, [pc, #360]	; (8000824 <LCD_GPIO_Init+0x174>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	4a59      	ldr	r2, [pc, #356]	; (8000824 <LCD_GPIO_Init+0x174>)
 80006c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006c4:	6453      	str	r3, [r2, #68]	; 0x44
 80006c6:	4b57      	ldr	r3, [pc, #348]	; (8000824 <LCD_GPIO_Init+0x174>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	4b53      	ldr	r3, [pc, #332]	; (8000824 <LCD_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a52      	ldr	r2, [pc, #328]	; (8000824 <LCD_GPIO_Init+0x174>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b50      	ldr	r3, [pc, #320]	; (8000824 <LCD_GPIO_Init+0x174>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b4c      	ldr	r3, [pc, #304]	; (8000824 <LCD_GPIO_Init+0x174>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a4b      	ldr	r2, [pc, #300]	; (8000824 <LCD_GPIO_Init+0x174>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b49      	ldr	r3, [pc, #292]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b45      	ldr	r3, [pc, #276]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a44      	ldr	r2, [pc, #272]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b42      	ldr	r3, [pc, #264]	; (8000824 <LCD_GPIO_Init+0x174>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <LCD_GPIO_Init+0x174>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a3d      	ldr	r2, [pc, #244]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a36      	ldr	r2, [pc, #216]	; (8000824 <LCD_GPIO_Init+0x174>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b34      	ldr	r3, [pc, #208]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b30      	ldr	r3, [pc, #192]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <LCD_GPIO_Init+0x174>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800077a:	f641 0358 	movw	r3, #6232	; 0x1858
 800077e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000788:	2302      	movs	r3, #2
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800078c:	230e      	movs	r3, #14
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	4824      	ldr	r0, [pc, #144]	; (8000828 <LCD_GPIO_Init+0x178>)
 8000798:	f002 f89c 	bl	80028d4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800079c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80007a0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4820      	ldr	r0, [pc, #128]	; (800082c <LCD_GPIO_Init+0x17c>)
 80007aa:	f002 f893 	bl	80028d4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80007ae:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80007b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	481d      	ldr	r0, [pc, #116]	; (8000830 <LCD_GPIO_Init+0x180>)
 80007bc:	f002 f88a 	bl	80028d4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80007c0:	2348      	movs	r3, #72	; 0x48
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	481a      	ldr	r0, [pc, #104]	; (8000834 <LCD_GPIO_Init+0x184>)
 80007cc:	f002 f882 	bl	80028d4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80007d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4816      	ldr	r0, [pc, #88]	; (8000838 <LCD_GPIO_Init+0x188>)
 80007de:	f002 f879 	bl	80028d4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80007e2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80007e6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4813      	ldr	r0, [pc, #76]	; (800083c <LCD_GPIO_Init+0x18c>)
 80007f0:	f002 f870 	bl	80028d4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80007f4:	2303      	movs	r3, #3
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80007f8:	2309      	movs	r3, #9
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	480a      	ldr	r0, [pc, #40]	; (800082c <LCD_GPIO_Init+0x17c>)
 8000804:	f002 f866 	bl	80028d4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000808:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <LCD_GPIO_Init+0x18c>)
 8000816:	f002 f85d 	bl	80028d4 <HAL_GPIO_Init>
}
 800081a:	bf00      	nop
 800081c:	3730      	adds	r7, #48	; 0x30
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020400 	.word	0x40020400
 8000830:	40020800 	.word	0x40020800
 8000834:	40020c00 	.word	0x40020c00
 8000838:	40021400 	.word	0x40021400
 800083c:	40021800 	.word	0x40021800

08000840 <LTCD__Init>:


void LTCD__Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8000844:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <LTCD__Init+0xb0>)
 8000846:	4a2b      	ldr	r2, [pc, #172]	; (80008f4 <LTCD__Init+0xb4>)
 8000848:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <LTCD__Init+0xb0>)
 800084c:	2209      	movs	r2, #9
 800084e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <LTCD__Init+0xb0>)
 8000852:	2201      	movs	r2, #1
 8000854:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <LTCD__Init+0xb0>)
 8000858:	221d      	movs	r2, #29
 800085a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <LTCD__Init+0xb0>)
 800085e:	2203      	movs	r2, #3
 8000860:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <LTCD__Init+0xb0>)
 8000864:	f240 120d 	movw	r2, #269	; 0x10d
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <LTCD__Init+0xb0>)
 800086c:	f240 1243 	movw	r2, #323	; 0x143
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <LTCD__Init+0xb0>)
 8000874:	f240 1217 	movw	r2, #279	; 0x117
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <LTCD__Init+0xb0>)
 800087c:	f240 1247 	movw	r2, #327	; 0x147
 8000880:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <LTCD__Init+0xb0>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <LTCD__Init+0xb0>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <LTCD__Init+0xb0>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <LTCD__Init+0xb8>)
 800089c:	2208      	movs	r2, #8
 800089e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <LTCD__Init+0xb8>)
 80008a2:	22c0      	movs	r2, #192	; 0xc0
 80008a4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <LTCD__Init+0xb8>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <LTCD__Init+0xb8>)
 80008ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80008b4:	4810      	ldr	r0, [pc, #64]	; (80008f8 <LTCD__Init+0xb8>)
 80008b6:	f003 f9e9 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <LTCD__Init+0xb0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <LTCD__Init+0xb0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <LTCD__Init+0xb0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <LTCD__Init+0xb0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80008d2:	f7ff feed 	bl	80006b0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <LTCD__Init+0xb0>)
 80008d8:	f002 face 	bl	8002e78 <HAL_LTDC_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80008e2:	f000 f9b5 	bl	8000c50 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80008e6:	f001 f85f 	bl	80019a8 <ili9341_Init>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000009c 	.word	0x2000009c
 80008f4:	40016800 	.word	0x40016800
 80008f8:	20000144 	.word	0x20000144

080008fc <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b090      	sub	sp, #64	; 0x40
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800090a:	23f0      	movs	r3, #240	; 0xf0
 800090c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000912:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000916:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800091c:	23ff      	movs	r3, #255	; 0xff
 800091e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800092a:	2305      	movs	r3, #5
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d101      	bne.n	8000938 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <LTCD_Layer_Init+0x78>)
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000938:	23f0      	movs	r3, #240	; 0xf0
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800093c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4619      	mov	r1, r3
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <LTCD_Layer_Init+0x7c>)
 800095e:	f002 fb5b 	bl	8003018 <HAL_LTDC_ConfigLayer>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000968:	f000 f972 	bl	8000c50 <LCD_Error_Handler>
	}

}
 800096c:	bf00      	nop
 800096e:	3740      	adds	r7, #64	; 0x40
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000200 	.word	0x20000200
 8000978:	2000009c 	.word	0x2000009c

0800097c <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients.
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	460b      	mov	r3, r1
 8000988:	80bb      	strh	r3, [r7, #4]
 800098a:	4613      	mov	r3, r2
 800098c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800098e:	88ba      	ldrh	r2, [r7, #4]
 8000990:	4613      	mov	r3, r2
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	1a9b      	subs	r3, r3, r2
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	461a      	mov	r2, r3
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	4413      	add	r3, r2
 800099e:	4905      	ldr	r1, [pc, #20]	; (80009b4 <LCD_Draw_Pixel+0x38>)
 80009a0:	887a      	ldrh	r2, [r7, #2]
 80009a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000200 	.word	0x20000200

080009b8 <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	603a      	str	r2, [r7, #0]
 80009c2:	80fb      	strh	r3, [r7, #6]
 80009c4:	460b      	mov	r3, r1
 80009c6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e04c      	b.n	8000a70 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	e03f      	b.n	8000a5c <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <LCD_DrawChar+0xd0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	889b      	ldrh	r3, [r3, #4]
 80009ee:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <LCD_DrawChar+0xd4>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	409a      	lsls	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	fa42 f303 	asr.w	r3, r2, r3
 8000a04:	400b      	ands	r3, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d104      	bne.n	8000a14 <LCD_DrawChar+0x5c>
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <LCD_DrawChar+0xd0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	2b0c      	cmp	r3, #12
 8000a12:	d920      	bls.n	8000a56 <LCD_DrawChar+0x9e>
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	fa42 f303 	asr.w	r3, r2, r3
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d104      	bne.n	8000a38 <LCD_DrawChar+0x80>
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <LCD_DrawChar+0xd0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	889b      	ldrh	r3, [r3, #4]
 8000a34:	2b0c      	cmp	r3, #12
 8000a36:	d80e      	bhi.n	8000a56 <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	4413      	add	r3, r2
 8000a40:	b298      	uxth	r0, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <LCD_DrawChar+0xd8>)
 8000a4e:	8812      	ldrh	r2, [r2, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f7ff ff93 	bl	800097c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <LCD_DrawChar+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	889b      	ldrh	r3, [r3, #4]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d3b8      	bcc.n	80009dc <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <LCD_DrawChar+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	88db      	ldrh	r3, [r3, #6]
 8000a76:	461a      	mov	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d3ab      	bcc.n	80009d6 <LCD_DrawChar+0x1e>
      }
    }
  }
}
 8000a7e:	bf00      	nop
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000174 	.word	0x20000174
 8000a8c:	aaaaaaab 	.word	0xaaaaaaab
 8000a90:	20000000 	.word	0x20000000

08000a94 <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	80bb      	strh	r3, [r7, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000aa6:	78fb      	ldrb	r3, [r7, #3]
 8000aa8:	3b20      	subs	r3, #32
 8000aaa:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <LCD_DisplayChar+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	4907      	ldr	r1, [pc, #28]	; (8000ad4 <LCD_DisplayChar+0x40>)
 8000ab6:	6809      	ldr	r1, [r1, #0]
 8000ab8:	88c9      	ldrh	r1, [r1, #6]
 8000aba:	fb01 f303 	mul.w	r3, r1, r3
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	441a      	add	r2, r3
 8000ac2:	88b9      	ldrh	r1, [r7, #4]
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff76 	bl	80009b8 <LCD_DrawChar>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000174 	.word	0x20000174

08000ad8 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <LCD_SetTextColor+0x1c>)
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	8013      	strh	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	20000000 	.word	0x20000000

08000af8 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <LCD_SetFont+0x1c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000174 	.word	0x20000174

08000b18 <LCD_Draw_Circle_Fill>:

// Draw Circle Filled
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4604      	mov	r4, r0
 8000b20:	4608      	mov	r0, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	461a      	mov	r2, r3
 8000b26:	4623      	mov	r3, r4
 8000b28:	80fb      	strh	r3, [r7, #6]
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80bb      	strh	r3, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	807b      	strh	r3, [r7, #2]
 8000b32:	4613      	mov	r3, r2
 8000b34:	803b      	strh	r3, [r7, #0]
  for(int16_t y=-radius; y<=radius; y++)
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	425b      	negs	r3, r3
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	81fb      	strh	r3, [r7, #14]
 8000b3e:	e034      	b.n	8000baa <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000b40:	887b      	ldrh	r3, [r7, #2]
 8000b42:	425b      	negs	r3, r3
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	81bb      	strh	r3, [r7, #12]
 8000b48:	e024      	b.n	8000b94 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000b4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000b52:	fb03 f202 	mul.w	r2, r3, r2
 8000b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b5a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000b5e:	fb01 f303 	mul.w	r3, r1, r3
 8000b62:	441a      	add	r2, r3
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	8879      	ldrh	r1, [r7, #2]
 8000b68:	fb01 f303 	mul.w	r3, r1, r3
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dc0b      	bgt.n	8000b88 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000b70:	89ba      	ldrh	r2, [r7, #12]
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	4413      	add	r3, r2
 8000b76:	b298      	uxth	r0, r3
 8000b78:	89fa      	ldrh	r2, [r7, #14]
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	883a      	ldrh	r2, [r7, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	f7ff fefa 	bl	800097c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000b88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	81bb      	strh	r3, [r7, #12]
 8000b94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	ddd5      	ble.n	8000b4a <LCD_Draw_Circle_Fill+0x32>
  for(int16_t y=-radius; y<=radius; y++)
 8000b9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	81fb      	strh	r3, [r7, #14]
 8000baa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	ddc5      	ble.n	8000b40 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}

08000bbe <LCD_Draw_Vertical_Line>:

// Draw Vertical Line
void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000bbe:	b590      	push	{r4, r7, lr}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	4611      	mov	r1, r2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4623      	mov	r3, r4
 8000bce:	80fb      	strh	r3, [r7, #6]
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	80bb      	strh	r3, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	81fb      	strh	r3, [r7, #14]
 8000be0:	e00b      	b.n	8000bfa <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000be2:	89fa      	ldrh	r2, [r7, #14]
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	b299      	uxth	r1, r3
 8000bea:	883a      	ldrh	r2, [r7, #0]
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fec4 	bl	800097c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000bf4:	89fb      	ldrh	r3, [r7, #14]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	81fb      	strh	r3, [r7, #14]
 8000bfa:	89fa      	ldrh	r2, [r7, #14]
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d3ef      	bcc.n	8000be2 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd90      	pop	{r4, r7, pc}

08000c0c <LCD_Clear>:

//Clear the screen
void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	460a      	mov	r2, r1
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10e      	bne.n	8000c40 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	e007      	b.n	8000c38 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000c28:	4908      	ldr	r1, [pc, #32]	; (8000c4c <LCD_Clear+0x40>)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	88ba      	ldrh	r2, [r7, #4]
 8000c2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000c3e:	d3f3      	bcc.n	8000c28 <LCD_Clear+0x1c>
		}
	}
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	20000200 	.word	0x20000200

08000c50 <LCD_Error_Handler>:

//Throws code into error handler
void LCD_Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 8000c54:	e7fe      	b.n	8000c54 <LCD_Error_Handler+0x4>

08000c56 <LCD_Draw_Square>:

// Shapes


//Draw Square Filled
void LCD_Draw_Square(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t color){
 8000c56:	b590      	push	{r4, r7, lr}
 8000c58:	b085      	sub	sp, #20
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	4611      	mov	r1, r2
 8000c62:	461a      	mov	r2, r3
 8000c64:	4623      	mov	r3, r4
 8000c66:	80fb      	strh	r3, [r7, #6]
 8000c68:	4603      	mov	r3, r0
 8000c6a:	80bb      	strh	r3, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
 8000c70:	4613      	mov	r3, r2
 8000c72:	803b      	strh	r3, [r7, #0]
	for (int16_t y=0; y<len; y++){
 8000c74:	2300      	movs	r3, #0
 8000c76:	81fb      	strh	r3, [r7, #14]
 8000c78:	e01f      	b.n	8000cba <LCD_Draw_Square+0x64>
		for (int16_t x=0; x<len; x++){
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	81bb      	strh	r3, [r7, #12]
 8000c7e:	e011      	b.n	8000ca4 <LCD_Draw_Square+0x4e>
			LCD_Draw_Pixel(x+Xpos, y+Ypos, color); //left side
 8000c80:	89ba      	ldrh	r2, [r7, #12]
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	4413      	add	r3, r2
 8000c86:	b298      	uxth	r0, r3
 8000c88:	89fa      	ldrh	r2, [r7, #14]
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	883a      	ldrh	r2, [r7, #0]
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff fe72 	bl	800097c <LCD_Draw_Pixel>
		for (int16_t x=0; x<len; x++){
 8000c98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	81bb      	strh	r3, [r7, #12]
 8000ca4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	dbe8      	blt.n	8000c80 <LCD_Draw_Square+0x2a>
	for (int16_t y=0; y<len; y++){
 8000cae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
 8000cba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbda      	blt.n	8000c7a <LCD_Draw_Square+0x24>
//			LCD_Draw_Pixel(x+Xpos, Ypos, color); //bottom
//			LCD_Draw_Pixel(len+Xpos, y+Ypos, color); //right sides
//			LCD_Draw_Pixel(x+Xpos, len+Ypos, color); //top
		}
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}

08000cce <LCD_Draw_Triangle>:

//Draw Triangle Filled
void LCD_Draw_Triangle(uint16_t Xpos, uint16_t Ypos, uint16_t len, uint16_t color){
 8000cce:	b590      	push	{r4, r7, lr}
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4611      	mov	r1, r2
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4623      	mov	r3, r4
 8000cde:	80fb      	strh	r3, [r7, #6]
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	80bb      	strh	r3, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	803b      	strh	r3, [r7, #0]
	for (int16_t y=0; y<len; y++){
 8000cec:	2300      	movs	r3, #0
 8000cee:	81fb      	strh	r3, [r7, #14]
 8000cf0:	e020      	b.n	8000d34 <LCD_Draw_Triangle+0x66>
		for (int16_t x=0; x<=y; x++){
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	81bb      	strh	r3, [r7, #12]
 8000cf6:	e011      	b.n	8000d1c <LCD_Draw_Triangle+0x4e>
			LCD_Draw_Pixel(x+Xpos, y+Ypos, color); //BASE
 8000cf8:	89ba      	ldrh	r2, [r7, #12]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	89fa      	ldrh	r2, [r7, #14]
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	883a      	ldrh	r2, [r7, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f7ff fe36 	bl	800097c <LCD_Draw_Pixel>
		for (int16_t x=0; x<=y; x++){
 8000d10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	3301      	adds	r3, #1
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	81bb      	strh	r3, [r7, #12]
 8000d1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dde7      	ble.n	8000cf8 <LCD_Draw_Triangle+0x2a>
	for (int16_t y=0; y<len; y++){
 8000d28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	81fb      	strh	r3, [r7, #14]
 8000d34:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dbd9      	blt.n	8000cf2 <LCD_Draw_Triangle+0x24>
		}
	}
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}

08000d48 <LCD_Draw_Horizontal_Line>:

//Draw Horizontal Line
void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color){
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4604      	mov	r4, r0
 8000d50:	4608      	mov	r0, r1
 8000d52:	4611      	mov	r1, r2
 8000d54:	461a      	mov	r2, r3
 8000d56:	4623      	mov	r3, r4
 8000d58:	80fb      	strh	r3, [r7, #6]
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80bb      	strh	r3, [r7, #4]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	807b      	strh	r3, [r7, #2]
 8000d62:	4613      	mov	r3, r2
 8000d64:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	81fb      	strh	r3, [r7, #14]
 8000d6a:	e00b      	b.n	8000d84 <LCD_Draw_Horizontal_Line+0x3c>
	{
		LCD_Draw_Pixel(x+i, y, color);
 8000d6c:	88fa      	ldrh	r2, [r7, #6]
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	4413      	add	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	883a      	ldrh	r2, [r7, #0]
 8000d76:	88b9      	ldrh	r1, [r7, #4]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fdff 	bl	800097c <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++)
 8000d7e:	89fb      	ldrh	r3, [r7, #14]
 8000d80:	3301      	adds	r3, #1
 8000d82:	81fb      	strh	r3, [r7, #14]
 8000d84:	89fa      	ldrh	r2, [r7, #14]
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d3ef      	bcc.n	8000d6c <LCD_Draw_Horizontal_Line+0x24>
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
	...

08000d98 <buttonStatus>:

//Checks the status of the button
void buttonStatus(void){
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

	button_Pressed = true;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <buttonStatus+0x14>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20000180 	.word	0x20000180

08000db0 <getLevelThree>:

//Get function returns a value of true when in Level 3; used to check the conditional in the IRQ handler
bool getLevelThree(void){
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

	return inLevelThree;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <getLevelThree+0x14>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000181 	.word	0x20000181

08000dc8 <getValidInput>:

//Get function returns the value of validInput; used to check the conditional in the IRQ handler
bool getValidInput(void){
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

	return validInput;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <getValidInput+0x14>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001a4 	.word	0x200001a4

08000de0 <setValidInput>:

//Set function sets validInput back to false; used in the IRQ handler
void setValidInput(void){
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

	validInput = false;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <setValidInput+0x14>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	200001a4 	.word	0x200001a4

08000df8 <incrementCounter>:

//Increments the count for Level 3 to ensure the user only completes the task 3 times
//Calculates the reaction time of each pass then calculates the average of the 3 times
void incrementCounter(void){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint32_t elapsedTime;

	uint32_t endTime = HAL_GetTick();
 8000dfe:	f001 fc27 	bl	8002650 <HAL_GetTick>
 8000e02:	6078      	str	r0, [r7, #4]
	if(counter == 0){
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <incrementCounter+0x84>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d107      	bne.n	8000e1c <incrementCounter+0x24>
		elapsedTime = endTime - firstTime3;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <incrementCounter+0x88>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	603b      	str	r3, [r7, #0]
		time[0] = elapsedTime;
 8000e16:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <incrementCounter+0x8c>)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	6013      	str	r3, [r2, #0]
	}
	if(counter == 1){
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <incrementCounter+0x84>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d107      	bne.n	8000e34 <incrementCounter+0x3c>
		elapsedTime = endTime - secondTime3;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <incrementCounter+0x90>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	603b      	str	r3, [r7, #0]
		time[1] = elapsedTime;
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <incrementCounter+0x8c>)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6053      	str	r3, [r2, #4]
	}
	if(counter == 2){
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <incrementCounter+0x84>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d115      	bne.n	8000e68 <incrementCounter+0x70>
		elapsedTime = endTime - thirdTime3;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <incrementCounter+0x94>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	603b      	str	r3, [r7, #0]
		time[2] = elapsedTime;
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <incrementCounter+0x8c>)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	6093      	str	r3, [r2, #8]

		aveTime3 = (time[0] + time[1] + time[2])/3;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <incrementCounter+0x8c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <incrementCounter+0x8c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	441a      	add	r2, r3
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <incrementCounter+0x8c>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <incrementCounter+0x98>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <incrementCounter+0x9c>)
 8000e66:	6013      	str	r3, [r2, #0]
	}
	counter++;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <incrementCounter+0x84>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <incrementCounter+0x84>)
 8000e70:	6013      	str	r3, [r2, #0]



}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000184 	.word	0x20000184
 8000e80:	20000194 	.word	0x20000194
 8000e84:	20000188 	.word	0x20000188
 8000e88:	20000198 	.word	0x20000198
 8000e8c:	2000019c 	.word	0x2000019c
 8000e90:	aaaaaaab 	.word	0xaaaaaaab
 8000e94:	200001a0 	.word	0x200001a0

08000e98 <level1Instructions>:

//Displays the instructions for Level 1 on the LCD screen, called in main.
void level1Instructions(void){
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af00      	add	r7, sp, #0

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fe1a 	bl	8000ad8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000ea4:	4843      	ldr	r0, [pc, #268]	; (8000fb4 <level1Instructions+0x11c>)
 8000ea6:	f7ff fe27 	bl	8000af8 <LCD_SetFont>

	int i = -15;
 8000eaa:	f06f 030e 	mvn.w	r3, #14
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c

	LCD_Clear(0,LCD_COLOR_WHITE);
 8000eb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fea9 	bl	8000c0c <LCD_Clear>

	char arr1[] = "PRESS THE BUTTON";
 8000eba:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <level1Instructions+0x120>)
 8000ebc:	f107 041c 	add.w	r4, r7, #28
 8000ec0:	461d      	mov	r5, r3
 8000ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	7023      	strb	r3, [r4, #0]
	char arr2[] = "WHEN A";
 8000eca:	4a3c      	ldr	r2, [pc, #240]	; (8000fbc <level1Instructions+0x124>)
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed4:	6018      	str	r0, [r3, #0]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	8019      	strh	r1, [r3, #0]
 8000eda:	3302      	adds	r3, #2
 8000edc:	0c0a      	lsrs	r2, r1, #16
 8000ede:	701a      	strb	r2, [r3, #0]
	char arr3[] = "CIRCLE APPEARS";
 8000ee0:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <level1Instructions+0x128>)
 8000ee2:	1d3c      	adds	r4, r7, #4
 8000ee4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee6:	c407      	stmia	r4!, {r0, r1, r2}
 8000ee8:	8023      	strh	r3, [r4, #0]
 8000eea:	3402      	adds	r4, #2
 8000eec:	0c1b      	lsrs	r3, r3, #16
 8000eee:	7023      	strb	r3, [r4, #0]

	for(int j=0; arr1[j] != '\0'; j++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ef4:	e010      	b.n	8000f18 <level1Instructions+0x80>
		LCD_DisplayChar(i+=15,120,arr1[j]);
 8000ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef8:	330f      	adds	r3, #15
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000efe:	b298      	uxth	r0, r3
 8000f00:	f107 021c 	add.w	r2, r7, #28
 8000f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f06:	4413      	add	r3, r2
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2178      	movs	r1, #120	; 0x78
 8000f0e:	f7ff fdc1 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr1[j] != '\0'; j++){
 8000f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f14:	3301      	adds	r3, #1
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f18:	f107 021c 	add.w	r2, r7, #28
 8000f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1e7      	bne.n	8000ef6 <level1Instructions+0x5e>
	}
	i = -15;
 8000f26:	f06f 030e 	mvn.w	r3, #14
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int j=0; arr2[j] != '\0'; j++){
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f30:	e010      	b.n	8000f54 <level1Instructions+0xbc>
		LCD_DisplayChar(i+=15,140,arr2[j]);
 8000f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f34:	330f      	adds	r3, #15
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f3a:	b298      	uxth	r0, r3
 8000f3c:	f107 0214 	add.w	r2, r7, #20
 8000f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f42:	4413      	add	r3, r2
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	218c      	movs	r1, #140	; 0x8c
 8000f4a:	f7ff fda3 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr2[j] != '\0'; j++){
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f50:	3301      	adds	r3, #1
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
 8000f54:	f107 0214 	add.w	r2, r7, #20
 8000f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1e7      	bne.n	8000f32 <level1Instructions+0x9a>
	}
	i = -15;
 8000f62:	f06f 030e 	mvn.w	r3, #14
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int j=0; arr3[j] != '\0'; j++){
 8000f68:	2300      	movs	r3, #0
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f6c:	e00f      	b.n	8000f8e <level1Instructions+0xf6>
		LCD_DisplayChar(i+=15,160,arr3[j]);
 8000f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f70:	330f      	adds	r3, #15
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f76:	b298      	uxth	r0, r3
 8000f78:	1d3a      	adds	r2, r7, #4
 8000f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	21a0      	movs	r1, #160	; 0xa0
 8000f84:	f7ff fd86 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr3[j] != '\0'; j++){
 8000f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8000f8e:	1d3a      	adds	r2, r7, #4
 8000f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1e9      	bne.n	8000f6e <level1Instructions+0xd6>
	}

	HAL_Delay(3000);
 8000f9a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f9e:	f001 fb63 	bl	8002668 <HAL_Delay>
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000fa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff fe30 	bl	8000c0c <LCD_Clear>
}
 8000fac:	bf00      	nop
 8000fae:	3740      	adds	r7, #64	; 0x40
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	08005140 	.word	0x08005140
 8000fbc:	08005154 	.word	0x08005154
 8000fc0:	0800515c 	.word	0x0800515c

08000fc4 <level2Instructions>:

//Displays the instructions for Level 2 on the LCD screen, called in main.
void level2Instructions(void){
 8000fc4:	b5b0      	push	{r4, r5, r7, lr}
 8000fc6:	b09a      	sub	sp, #104	; 0x68
 8000fc8:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fd84 	bl	8000ad8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000fd0:	4867      	ldr	r0, [pc, #412]	; (8001170 <level2Instructions+0x1ac>)
 8000fd2:	f7ff fd91 	bl	8000af8 <LCD_SetFont>

	int i = -15;
 8000fd6:	f06f 030e 	mvn.w	r3, #14
 8000fda:	667b      	str	r3, [r7, #100]	; 0x64

	//HAL_Delay(3000);
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000fdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fe13 	bl	8000c0c <LCD_Clear>
	HAL_Delay(1000);
 8000fe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fea:	f001 fb3d 	bl	8002668 <HAL_Delay>
	char arr1[] = "PRESS THE BUTTON";
 8000fee:	4b61      	ldr	r3, [pc, #388]	; (8001174 <level2Instructions+0x1b0>)
 8000ff0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffa:	682b      	ldr	r3, [r5, #0]
 8000ffc:	7023      	strb	r3, [r4, #0]
	char arr2[] = "WHEN A SQUARE";
 8000ffe:	4b5e      	ldr	r3, [pc, #376]	; (8001178 <level2Instructions+0x1b4>)
 8001000:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001006:	c407      	stmia	r4!, {r0, r1, r2}
 8001008:	8023      	strh	r3, [r4, #0]
	char arr3[] = "APPEARS IN THE";
 800100a:	4b5c      	ldr	r3, [pc, #368]	; (800117c <level2Instructions+0x1b8>)
 800100c:	f107 041c 	add.w	r4, r7, #28
 8001010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001012:	c407      	stmia	r4!, {r0, r1, r2}
 8001014:	8023      	strh	r3, [r4, #0]
 8001016:	3402      	adds	r4, #2
 8001018:	0c1b      	lsrs	r3, r3, #16
 800101a:	7023      	strb	r3, [r4, #0]
	char arr4[] = "TOP RIGHT";
 800101c:	4a58      	ldr	r2, [pc, #352]	; (8001180 <level2Instructions+0x1bc>)
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	ca07      	ldmia	r2, {r0, r1, r2}
 8001024:	c303      	stmia	r3!, {r0, r1}
 8001026:	801a      	strh	r2, [r3, #0]
	char arr5[] = "QUADRANT";
 8001028:	4a56      	ldr	r2, [pc, #344]	; (8001184 <level2Instructions+0x1c0>)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	ca07      	ldmia	r2, {r0, r1, r2}
 800102e:	c303      	stmia	r3!, {r0, r1}
 8001030:	701a      	strb	r2, [r3, #0]
	for(int j=0; arr1[j] != '\0'; j++){
 8001032:	2300      	movs	r3, #0
 8001034:	663b      	str	r3, [r7, #96]	; 0x60
 8001036:	e010      	b.n	800105a <level2Instructions+0x96>
		LCD_DisplayChar(i+=15,120,arr1[j]);
 8001038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800103a:	330f      	adds	r3, #15
 800103c:	667b      	str	r3, [r7, #100]	; 0x64
 800103e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001040:	b298      	uxth	r0, r3
 8001042:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	2178      	movs	r1, #120	; 0x78
 8001050:	f7ff fd20 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr1[j] != '\0'; j++){
 8001054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001056:	3301      	adds	r3, #1
 8001058:	663b      	str	r3, [r7, #96]	; 0x60
 800105a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800105e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e7      	bne.n	8001038 <level2Instructions+0x74>
	}
	i = -15;
 8001068:	f06f 030e 	mvn.w	r3, #14
 800106c:	667b      	str	r3, [r7, #100]	; 0x64
	for(int j=0; arr2[j] != '\0'; j++){
 800106e:	2300      	movs	r3, #0
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001072:	e010      	b.n	8001096 <level2Instructions+0xd2>
		LCD_DisplayChar(i+=15,140,arr2[j]);
 8001074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001076:	330f      	adds	r3, #15
 8001078:	667b      	str	r3, [r7, #100]	; 0x64
 800107a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800107c:	b298      	uxth	r0, r3
 800107e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	218c      	movs	r1, #140	; 0x8c
 800108c:	f7ff fd02 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr2[j] != '\0'; j++){
 8001090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001092:	3301      	adds	r3, #1
 8001094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001096:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800109a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e7      	bne.n	8001074 <level2Instructions+0xb0>
	}
	i = -15;
 80010a4:	f06f 030e 	mvn.w	r3, #14
 80010a8:	667b      	str	r3, [r7, #100]	; 0x64
	for(int j=0; arr3[j] != '\0'; j++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80010ae:	e010      	b.n	80010d2 <level2Instructions+0x10e>
		LCD_DisplayChar(i+=15,160,arr3[j]);
 80010b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010b2:	330f      	adds	r3, #15
 80010b4:	667b      	str	r3, [r7, #100]	; 0x64
 80010b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010b8:	b298      	uxth	r0, r3
 80010ba:	f107 021c 	add.w	r2, r7, #28
 80010be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	21a0      	movs	r1, #160	; 0xa0
 80010c8:	f7ff fce4 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr3[j] != '\0'; j++){
 80010cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010ce:	3301      	adds	r3, #1
 80010d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80010d2:	f107 021c 	add.w	r2, r7, #28
 80010d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e7      	bne.n	80010b0 <level2Instructions+0xec>
	}
	i = -15;
 80010e0:	f06f 030e 	mvn.w	r3, #14
 80010e4:	667b      	str	r3, [r7, #100]	; 0x64
	for(int j=0; arr4[j] != '\0'; j++){
 80010e6:	2300      	movs	r3, #0
 80010e8:	657b      	str	r3, [r7, #84]	; 0x54
 80010ea:	e010      	b.n	800110e <level2Instructions+0x14a>
		LCD_DisplayChar(i+=15,180,arr4[j]);
 80010ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010ee:	330f      	adds	r3, #15
 80010f0:	667b      	str	r3, [r7, #100]	; 0x64
 80010f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010f4:	b298      	uxth	r0, r3
 80010f6:	f107 0210 	add.w	r2, r7, #16
 80010fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010fc:	4413      	add	r3, r2
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	21b4      	movs	r1, #180	; 0xb4
 8001104:	f7ff fcc6 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr4[j] != '\0'; j++){
 8001108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110a:	3301      	adds	r3, #1
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
 800110e:	f107 0210 	add.w	r2, r7, #16
 8001112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e7      	bne.n	80010ec <level2Instructions+0x128>
	}
	i = -15;
 800111c:	f06f 030e 	mvn.w	r3, #14
 8001120:	667b      	str	r3, [r7, #100]	; 0x64
	for(int j=0; arr5[j] != '\0'; j++){
 8001122:	2300      	movs	r3, #0
 8001124:	653b      	str	r3, [r7, #80]	; 0x50
 8001126:	e00f      	b.n	8001148 <level2Instructions+0x184>
		LCD_DisplayChar(i+=15,200,arr5[j]);
 8001128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800112a:	330f      	adds	r3, #15
 800112c:	667b      	str	r3, [r7, #100]	; 0x64
 800112e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001130:	b298      	uxth	r0, r3
 8001132:	1d3a      	adds	r2, r7, #4
 8001134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001136:	4413      	add	r3, r2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	21c8      	movs	r1, #200	; 0xc8
 800113e:	f7ff fca9 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr5[j] != '\0'; j++){
 8001142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001144:	3301      	adds	r3, #1
 8001146:	653b      	str	r3, [r7, #80]	; 0x50
 8001148:	1d3a      	adds	r2, r7, #4
 800114a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1e9      	bne.n	8001128 <level2Instructions+0x164>
	}

	HAL_Delay(3000);
 8001154:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001158:	f001 fa86 	bl	8002668 <HAL_Delay>
	LCD_Clear(0,LCD_COLOR_WHITE);
 800115c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fd53 	bl	8000c0c <LCD_Clear>
}
 8001166:	bf00      	nop
 8001168:	3768      	adds	r7, #104	; 0x68
 800116a:	46bd      	mov	sp, r7
 800116c:	bdb0      	pop	{r4, r5, r7, pc}
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	08005140 	.word	0x08005140
 8001178:	0800516c 	.word	0x0800516c
 800117c:	0800517c 	.word	0x0800517c
 8001180:	0800518c 	.word	0x0800518c
 8001184:	08005198 	.word	0x08005198

08001188 <level3Instructions>:

//Displays the instructions for Level 3 on the LCD screen, called in main.
void level3Instructions(void){
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b09a      	sub	sp, #104	; 0x68
 800118c:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fca2 	bl	8000ad8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001194:	4865      	ldr	r0, [pc, #404]	; (800132c <level3Instructions+0x1a4>)
 8001196:	f7ff fcaf 	bl	8000af8 <LCD_SetFont>

	int i = -15;
 800119a:	f06f 030e 	mvn.w	r3, #14
 800119e:	667b      	str	r3, [r7, #100]	; 0x64

	//HAL_Delay(3000);
	LCD_Clear(0,LCD_COLOR_WHITE);
 80011a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff fd31 	bl	8000c0c <LCD_Clear>
	HAL_Delay(1000);
 80011aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ae:	f001 fa5b 	bl	8002668 <HAL_Delay>
	char arr1[] = "PRESS THE BUTTON";
 80011b2:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <level3Instructions+0x1a8>)
 80011b4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80011b8:	461d      	mov	r5, r3
 80011ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	7023      	strb	r3, [r4, #0]
	char arr2[] = "WHEN THE BALL";
 80011c2:	4b5c      	ldr	r3, [pc, #368]	; (8001334 <level3Instructions+0x1ac>)
 80011c4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80011c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ca:	c407      	stmia	r4!, {r0, r1, r2}
 80011cc:	8023      	strh	r3, [r4, #0]
	char arr3[] = "fULLY CROSSES";
 80011ce:	4b5a      	ldr	r3, [pc, #360]	; (8001338 <level3Instructions+0x1b0>)
 80011d0:	f107 041c 	add.w	r4, r7, #28
 80011d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d6:	c407      	stmia	r4!, {r0, r1, r2}
 80011d8:	8023      	strh	r3, [r4, #0]
	char arr4[] = "THE LINE";
 80011da:	4a58      	ldr	r2, [pc, #352]	; (800133c <level3Instructions+0x1b4>)
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e2:	c303      	stmia	r3!, {r0, r1}
 80011e4:	701a      	strb	r2, [r3, #0]
	char arr5[] = "DO THIS 3 TIMES";
 80011e6:	4b56      	ldr	r3, [pc, #344]	; (8001340 <level3Instructions+0x1b8>)
 80011e8:	463c      	mov	r4, r7
 80011ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int j=0; arr1[j] != '\0'; j++){
 80011f0:	2300      	movs	r3, #0
 80011f2:	663b      	str	r3, [r7, #96]	; 0x60
 80011f4:	e010      	b.n	8001218 <level3Instructions+0x90>
		LCD_DisplayChar(i+=15,120,arr1[j]);
 80011f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011f8:	330f      	adds	r3, #15
 80011fa:	667b      	str	r3, [r7, #100]	; 0x64
 80011fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011fe:	b298      	uxth	r0, r3
 8001200:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	2178      	movs	r1, #120	; 0x78
 800120e:	f7ff fc41 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr1[j] != '\0'; j++){
 8001212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001214:	3301      	adds	r3, #1
 8001216:	663b      	str	r3, [r7, #96]	; 0x60
 8001218:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800121c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e7      	bne.n	80011f6 <level3Instructions+0x6e>
	}
	i = -15;
 8001226:	f06f 030e 	mvn.w	r3, #14
 800122a:	667b      	str	r3, [r7, #100]	; 0x64
	for(int j=0; arr2[j] != '\0'; j++){
 800122c:	2300      	movs	r3, #0
 800122e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001230:	e010      	b.n	8001254 <level3Instructions+0xcc>
		LCD_DisplayChar(i+=15,140,arr2[j]);
 8001232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001234:	330f      	adds	r3, #15
 8001236:	667b      	str	r3, [r7, #100]	; 0x64
 8001238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800123a:	b298      	uxth	r0, r3
 800123c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	218c      	movs	r1, #140	; 0x8c
 800124a:	f7ff fc23 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr2[j] != '\0'; j++){
 800124e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001250:	3301      	adds	r3, #1
 8001252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001254:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800125a:	4413      	add	r3, r2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1e7      	bne.n	8001232 <level3Instructions+0xaa>
	}
	i = -15;
 8001262:	f06f 030e 	mvn.w	r3, #14
 8001266:	667b      	str	r3, [r7, #100]	; 0x64
	for(int j=0; arr3[j] != '\0'; j++){
 8001268:	2300      	movs	r3, #0
 800126a:	65bb      	str	r3, [r7, #88]	; 0x58
 800126c:	e010      	b.n	8001290 <level3Instructions+0x108>
		LCD_DisplayChar(i+=15,160,arr3[j]);
 800126e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001270:	330f      	adds	r3, #15
 8001272:	667b      	str	r3, [r7, #100]	; 0x64
 8001274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001276:	b298      	uxth	r0, r3
 8001278:	f107 021c 	add.w	r2, r7, #28
 800127c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	21a0      	movs	r1, #160	; 0xa0
 8001286:	f7ff fc05 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr3[j] != '\0'; j++){
 800128a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800128c:	3301      	adds	r3, #1
 800128e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001290:	f107 021c 	add.w	r2, r7, #28
 8001294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1e7      	bne.n	800126e <level3Instructions+0xe6>
	}
	i = -15;
 800129e:	f06f 030e 	mvn.w	r3, #14
 80012a2:	667b      	str	r3, [r7, #100]	; 0x64
	for(int j=0; arr4[j] != '\0'; j++){
 80012a4:	2300      	movs	r3, #0
 80012a6:	657b      	str	r3, [r7, #84]	; 0x54
 80012a8:	e010      	b.n	80012cc <level3Instructions+0x144>
		LCD_DisplayChar(i+=15,180,arr4[j]);
 80012aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ac:	330f      	adds	r3, #15
 80012ae:	667b      	str	r3, [r7, #100]	; 0x64
 80012b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012b2:	b298      	uxth	r0, r3
 80012b4:	f107 0210 	add.w	r2, r7, #16
 80012b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	21b4      	movs	r1, #180	; 0xb4
 80012c2:	f7ff fbe7 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr4[j] != '\0'; j++){
 80012c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c8:	3301      	adds	r3, #1
 80012ca:	657b      	str	r3, [r7, #84]	; 0x54
 80012cc:	f107 0210 	add.w	r2, r7, #16
 80012d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e7      	bne.n	80012aa <level3Instructions+0x122>
	}
	i = -15;
 80012da:	f06f 030e 	mvn.w	r3, #14
 80012de:	667b      	str	r3, [r7, #100]	; 0x64
	for(int j=0; arr5[j] != '\0'; j++){
 80012e0:	2300      	movs	r3, #0
 80012e2:	653b      	str	r3, [r7, #80]	; 0x50
 80012e4:	e00f      	b.n	8001306 <level3Instructions+0x17e>
		LCD_DisplayChar(i+=15,200,arr5[j]);
 80012e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012e8:	330f      	adds	r3, #15
 80012ea:	667b      	str	r3, [r7, #100]	; 0x64
 80012ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ee:	b298      	uxth	r0, r3
 80012f0:	463a      	mov	r2, r7
 80012f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	21c8      	movs	r1, #200	; 0xc8
 80012fc:	f7ff fbca 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr5[j] != '\0'; j++){
 8001300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001302:	3301      	adds	r3, #1
 8001304:	653b      	str	r3, [r7, #80]	; 0x50
 8001306:	463a      	mov	r2, r7
 8001308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1e9      	bne.n	80012e6 <level3Instructions+0x15e>
	}


	HAL_Delay(3000);
 8001312:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001316:	f001 f9a7 	bl	8002668 <HAL_Delay>
	LCD_Clear(0,LCD_COLOR_WHITE);
 800131a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fc74 	bl	8000c0c <LCD_Clear>

}
 8001324:	bf00      	nop
 8001326:	3768      	adds	r7, #104	; 0x68
 8001328:	46bd      	mov	sp, r7
 800132a:	bdb0      	pop	{r4, r5, r7, pc}
 800132c:	20000008 	.word	0x20000008
 8001330:	08005140 	.word	0x08005140
 8001334:	080051a4 	.word	0x080051a4
 8001338:	080051b4 	.word	0x080051b4
 800133c:	080051c4 	.word	0x080051c4
 8001340:	080051d0 	.word	0x080051d0

08001344 <timeDisplay>:

//Displays the final times for each level at the end of the game; called in Level3().
void timeDisplay(uint32_t totalTime1, uint32_t totalTime2, uint32_t totalTime3){
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b09f      	sub	sp, #124	; 0x7c
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
	char time1[4];
	char time2[4];
	char time3[4];

	itoa(totalTime1, time1, 10);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001356:	220a      	movs	r2, #10
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fc2d 	bl	8004bb8 <itoa>
	itoa(totalTime2, time2, 10);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001364:	220a      	movs	r2, #10
 8001366:	4618      	mov	r0, r3
 8001368:	f003 fc26 	bl	8004bb8 <itoa>
	itoa(totalTime3, time3, 10);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001372:	220a      	movs	r2, #10
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fc1f 	bl	8004bb8 <itoa>

	char arr1[] = "Level 1 Time";
 800137a:	4b78      	ldr	r3, [pc, #480]	; (800155c <timeDisplay+0x218>)
 800137c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001380:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001382:	c407      	stmia	r4!, {r0, r1, r2}
 8001384:	7023      	strb	r3, [r4, #0]
	char arr2[] = "Level 2 Time";
 8001386:	4b76      	ldr	r3, [pc, #472]	; (8001560 <timeDisplay+0x21c>)
 8001388:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800138c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138e:	c407      	stmia	r4!, {r0, r1, r2}
 8001390:	7023      	strb	r3, [r4, #0]
	char arr3[] = "Level 3 Average";
 8001392:	4b74      	ldr	r3, [pc, #464]	; (8001564 <timeDisplay+0x220>)
 8001394:	f107 041c 	add.w	r4, r7, #28
 8001398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char arr32[] = "Time";
 800139e:	4a72      	ldr	r2, [pc, #456]	; (8001568 <timeDisplay+0x224>)
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a8:	6018      	str	r0, [r3, #0]
 80013aa:	3304      	adds	r3, #4
 80013ac:	7019      	strb	r1, [r3, #0]

	int i = -15;
 80013ae:	f06f 030e 	mvn.w	r3, #14
 80013b2:	677b      	str	r3, [r7, #116]	; 0x74
	for(int j=0; arr1[j] != '\0'; j++){
 80013b4:	2300      	movs	r3, #0
 80013b6:	673b      	str	r3, [r7, #112]	; 0x70
 80013b8:	e010      	b.n	80013dc <timeDisplay+0x98>
		LCD_DisplayChar(i+=15,120,arr1[j]);
 80013ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013bc:	330f      	adds	r3, #15
 80013be:	677b      	str	r3, [r7, #116]	; 0x74
 80013c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013c2:	b298      	uxth	r0, r3
 80013c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80013c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	2178      	movs	r1, #120	; 0x78
 80013d2:	f7ff fb5f 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr1[j] != '\0'; j++){
 80013d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013d8:	3301      	adds	r3, #1
 80013da:	673b      	str	r3, [r7, #112]	; 0x70
 80013dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80013e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e7      	bne.n	80013ba <timeDisplay+0x76>
	}
	i = -15;
 80013ea:	f06f 030e 	mvn.w	r3, #14
 80013ee:	677b      	str	r3, [r7, #116]	; 0x74
	for(int j=0; time1[j] != '\0'; j++){
 80013f0:	2300      	movs	r3, #0
 80013f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013f4:	e010      	b.n	8001418 <timeDisplay+0xd4>
		LCD_DisplayChar(i+=15,140,time1[j]);
 80013f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013f8:	330f      	adds	r3, #15
 80013fa:	677b      	str	r3, [r7, #116]	; 0x74
 80013fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013fe:	b298      	uxth	r0, r3
 8001400:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	218c      	movs	r1, #140	; 0x8c
 800140e:	f7ff fb41 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; time1[j] != '\0'; j++){
 8001412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001414:	3301      	adds	r3, #1
 8001416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001418:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800141c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1e7      	bne.n	80013f6 <timeDisplay+0xb2>
	}
	i = -15;
 8001426:	f06f 030e 	mvn.w	r3, #14
 800142a:	677b      	str	r3, [r7, #116]	; 0x74
	for(int j=0; arr2[j] != '\0'; j++){
 800142c:	2300      	movs	r3, #0
 800142e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001430:	e010      	b.n	8001454 <timeDisplay+0x110>
		LCD_DisplayChar(i+=15,160,arr2[j]);
 8001432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001434:	330f      	adds	r3, #15
 8001436:	677b      	str	r3, [r7, #116]	; 0x74
 8001438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800143a:	b298      	uxth	r0, r3
 800143c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	21a0      	movs	r1, #160	; 0xa0
 800144a:	f7ff fb23 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr2[j] != '\0'; j++){
 800144e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001450:	3301      	adds	r3, #1
 8001452:	66bb      	str	r3, [r7, #104]	; 0x68
 8001454:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800145a:	4413      	add	r3, r2
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1e7      	bne.n	8001432 <timeDisplay+0xee>
	}
	i = -15;
 8001462:	f06f 030e 	mvn.w	r3, #14
 8001466:	677b      	str	r3, [r7, #116]	; 0x74
	for(int j=0; time2[j] != '\0'; j++){
 8001468:	2300      	movs	r3, #0
 800146a:	667b      	str	r3, [r7, #100]	; 0x64
 800146c:	e010      	b.n	8001490 <timeDisplay+0x14c>
		LCD_DisplayChar(i+=15,180,time2[j]);
 800146e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001470:	330f      	adds	r3, #15
 8001472:	677b      	str	r3, [r7, #116]	; 0x74
 8001474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001476:	b298      	uxth	r0, r3
 8001478:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800147c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	21b4      	movs	r1, #180	; 0xb4
 8001486:	f7ff fb05 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; time2[j] != '\0'; j++){
 800148a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800148c:	3301      	adds	r3, #1
 800148e:	667b      	str	r3, [r7, #100]	; 0x64
 8001490:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1e7      	bne.n	800146e <timeDisplay+0x12a>
	}
	i = -15;
 800149e:	f06f 030e 	mvn.w	r3, #14
 80014a2:	677b      	str	r3, [r7, #116]	; 0x74
	for(int j=0; arr3[j] != '\0'; j++){
 80014a4:	2300      	movs	r3, #0
 80014a6:	663b      	str	r3, [r7, #96]	; 0x60
 80014a8:	e010      	b.n	80014cc <timeDisplay+0x188>
		LCD_DisplayChar(i+=15,200,arr3[j]);
 80014aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ac:	330f      	adds	r3, #15
 80014ae:	677b      	str	r3, [r7, #116]	; 0x74
 80014b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014b2:	b298      	uxth	r0, r3
 80014b4:	f107 021c 	add.w	r2, r7, #28
 80014b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	21c8      	movs	r1, #200	; 0xc8
 80014c2:	f7ff fae7 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr3[j] != '\0'; j++){
 80014c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014c8:	3301      	adds	r3, #1
 80014ca:	663b      	str	r3, [r7, #96]	; 0x60
 80014cc:	f107 021c 	add.w	r2, r7, #28
 80014d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1e7      	bne.n	80014aa <timeDisplay+0x166>
	}
	i = -15;
 80014da:	f06f 030e 	mvn.w	r3, #14
 80014de:	677b      	str	r3, [r7, #116]	; 0x74
	for(int j=0; arr32[j] != '\0'; j++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014e4:	e010      	b.n	8001508 <timeDisplay+0x1c4>
		LCD_DisplayChar(i+=15,220,arr32[j]);
 80014e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014e8:	330f      	adds	r3, #15
 80014ea:	677b      	str	r3, [r7, #116]	; 0x74
 80014ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ee:	b298      	uxth	r0, r3
 80014f0:	f107 0214 	add.w	r2, r7, #20
 80014f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	21dc      	movs	r1, #220	; 0xdc
 80014fe:	f7ff fac9 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; arr32[j] != '\0'; j++){
 8001502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001504:	3301      	adds	r3, #1
 8001506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001508:	f107 0214 	add.w	r2, r7, #20
 800150c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1e7      	bne.n	80014e6 <timeDisplay+0x1a2>
	}
	i = -15;
 8001516:	f06f 030e 	mvn.w	r3, #14
 800151a:	677b      	str	r3, [r7, #116]	; 0x74
	for(int j=0; time3[j] != '\0'; j++){
 800151c:	2300      	movs	r3, #0
 800151e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001520:	e010      	b.n	8001544 <timeDisplay+0x200>
		LCD_DisplayChar(i+=15,240,time3[j]);
 8001522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001524:	330f      	adds	r3, #15
 8001526:	677b      	str	r3, [r7, #116]	; 0x74
 8001528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800152a:	b298      	uxth	r0, r3
 800152c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001532:	4413      	add	r3, r2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	21f0      	movs	r1, #240	; 0xf0
 800153a:	f7ff faab 	bl	8000a94 <LCD_DisplayChar>
	for(int j=0; time3[j] != '\0'; j++){
 800153e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001540:	3301      	adds	r3, #1
 8001542:	65bb      	str	r3, [r7, #88]	; 0x58
 8001544:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800154a:	4413      	add	r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1e7      	bne.n	8001522 <timeDisplay+0x1de>
	}

}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	377c      	adds	r7, #124	; 0x7c
 8001558:	46bd      	mov	sp, r7
 800155a:	bd90      	pop	{r4, r7, pc}
 800155c:	080051e0 	.word	0x080051e0
 8001560:	080051f0 	.word	0x080051f0
 8001564:	08005200 	.word	0x08005200
 8001568:	08005210 	.word	0x08005210

0800156c <Level1>:
//Game Levels

//Level 1: Generates a random shape, times the user's reaction to a specific shape (the circle).
void Level1 (void){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
	uint32_t time1;
	uint32_t endTime1;

		LCD_Clear(0,LCD_COLOR_WHITE);
 8001572:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff fb48 	bl	8000c0c <LCD_Clear>
		uint32_t RandomNum = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]

		//Generate random shape;
		while(RandomNum < 66){
 8001580:	e04d      	b.n	800161e <Level1+0xb2>
			RandomNum = 1+(getRandomNum() % 100); //Sets the range of randomly generated numbers to be between 1 and 100.
 8001582:	f000 fd05 	bl	8001f90 <getRandomNum>
 8001586:	4602      	mov	r2, r0
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <Level1+0x100>)
 800158a:	fba3 1302 	umull	r1, r3, r3, r2
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2164      	movs	r1, #100	; 0x64
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	3301      	adds	r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
		  if (RandomNum<33){
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d814      	bhi.n	80015cc <Level1+0x60>

			  LCD_Draw_Square(105,150,40,LCD_COLOR_BLUE2);
 80015a2:	f240 531f 	movw	r3, #1311	; 0x51f
 80015a6:	2228      	movs	r2, #40	; 0x28
 80015a8:	2196      	movs	r1, #150	; 0x96
 80015aa:	2069      	movs	r0, #105	; 0x69
 80015ac:	f7ff fb53 	bl	8000c56 <LCD_Draw_Square>

			  HAL_Delay(1000);
 80015b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b4:	f001 f858 	bl	8002668 <HAL_Delay>
			  LCD_Clear(0,LCD_COLOR_WHITE);
 80015b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff fb25 	bl	8000c0c <LCD_Clear>
			  HAL_Delay(500);
 80015c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c6:	f001 f84f 	bl	8002668 <HAL_Delay>
 80015ca:	e028      	b.n	800161e <Level1+0xb2>

		  } else if(RandomNum >= 33 && RandomNum<66){
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d917      	bls.n	8001602 <Level1+0x96>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b41      	cmp	r3, #65	; 0x41
 80015d6:	d814      	bhi.n	8001602 <Level1+0x96>

			  LCD_Draw_Triangle(105,150,40,LCD_COLOR_YELLOW);
 80015d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015dc:	2228      	movs	r2, #40	; 0x28
 80015de:	2196      	movs	r1, #150	; 0x96
 80015e0:	2069      	movs	r0, #105	; 0x69
 80015e2:	f7ff fb74 	bl	8000cce <LCD_Draw_Triangle>

			  HAL_Delay(1000);
 80015e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ea:	f001 f83d 	bl	8002668 <HAL_Delay>
			  LCD_Clear(0,LCD_COLOR_WHITE);
 80015ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fb0a 	bl	8000c0c <LCD_Clear>
			  HAL_Delay(500);
 80015f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015fc:	f001 f834 	bl	8002668 <HAL_Delay>
 8001600:	e00d      	b.n	800161e <Level1+0xb2>

		  } else if(RandomNum >= 66){
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b41      	cmp	r3, #65	; 0x41
 8001606:	d90a      	bls.n	800161e <Level1+0xb2>
			  time1 = HAL_GetTick();
 8001608:	f001 f822 	bl	8002650 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]
			  LCD_Draw_Circle_Fill(125,150,20,LCD_COLOR_MAGENTA);
 800160e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001612:	2214      	movs	r2, #20
 8001614:	2196      	movs	r1, #150	; 0x96
 8001616:	207d      	movs	r0, #125	; 0x7d
 8001618:	f7ff fa7e 	bl	8000b18 <LCD_Draw_Circle_Fill>
			  break;
 800161c:	e002      	b.n	8001624 <Level1+0xb8>
		while(RandomNum < 66){
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b41      	cmp	r3, #65	; 0x41
 8001622:	d9ae      	bls.n	8001582 <Level1+0x16>
		  }

		}
		button_Pressed = 0;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <Level1+0x104>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
		while(button_Pressed == 0){
 800162a:	bf00      	nop
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <Level1+0x104>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	f083 0301 	eor.w	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f8      	bne.n	800162c <Level1+0xc0>

		}
		button_Pressed = 0;
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <Level1+0x104>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
		LCD_Clear(0,LCD_COLOR_WHITE);
 8001640:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff fae1 	bl	8000c0c <LCD_Clear>
		endTime1 = HAL_GetTick();
 800164a:	f001 f801 	bl	8002650 <HAL_GetTick>
 800164e:	6078      	str	r0, [r7, #4]
		totalTime1 = endTime1 - time1;
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4a07      	ldr	r2, [pc, #28]	; (8001674 <Level1+0x108>)
 8001658:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 800165a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165e:	f001 f803 	bl	8002668 <HAL_Delay>


}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	51eb851f 	.word	0x51eb851f
 8001670:	20000180 	.word	0x20000180
 8001674:	20000178 	.word	0x20000178

08001678 <Level2>:

//Level 2: Randomly generates a square in 1 of 4 quadrants, times the user's reaction to the square appearing in top right quadrant.


void Level2 (void){
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0

	uint32_t time2;
	uint32_t endTime2;

	uint16_t HALF_LCD_PIXEL_WIDTH = LCD_PIXEL_WIDTH/2;
 800167e:	2378      	movs	r3, #120	; 0x78
 8001680:	81fb      	strh	r3, [r7, #14]
	uint16_t HALF_LCD_PIXEL_HEIGHT = LCD_PIXEL_HEIGHT/2;
 8001682:	23a0      	movs	r3, #160	; 0xa0
 8001684:	81bb      	strh	r3, [r7, #12]

	uint16_t QUARTER_LCD_PIXEL_WIDTH = LCD_PIXEL_WIDTH/4;
 8001686:	233c      	movs	r3, #60	; 0x3c
 8001688:	817b      	strh	r3, [r7, #10]
	uint16_t QUARTER_LCD_PIXEL_HEIGHT = LCD_PIXEL_HEIGHT/4;
 800168a:	2350      	movs	r3, #80	; 0x50
 800168c:	813b      	strh	r3, [r7, #8]

	uint16_t THIRD_QUARTER_LCD_PIXEL_WIDTH = 3*(LCD_PIXEL_WIDTH/4);
 800168e:	23b4      	movs	r3, #180	; 0xb4
 8001690:	80fb      	strh	r3, [r7, #6]
	uint16_t THIRD_QUARTER_LCD_PIXEL_HEIGHT = 3*(LCD_PIXEL_HEIGHT/4);
 8001692:	23f0      	movs	r3, #240	; 0xf0
 8001694:	80bb      	strh	r3, [r7, #4]

	//Need 4 quadrants: vertical line at x=1/2 width; horizontal line at y=1/2 height
	LCD_Draw_Vertical_Line(HALF_LCD_PIXEL_WIDTH, 0, LCD_PIXEL_HEIGHT, LCD_COLOR_BLACK);
 8001696:	89f8      	ldrh	r0, [r7, #14]
 8001698:	2300      	movs	r3, #0
 800169a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800169e:	2100      	movs	r1, #0
 80016a0:	f7ff fa8d 	bl	8000bbe <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(0, HALF_LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH, LCD_COLOR_BLACK);
 80016a4:	89b9      	ldrh	r1, [r7, #12]
 80016a6:	2300      	movs	r3, #0
 80016a8:	22f0      	movs	r2, #240	; 0xf0
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7ff fb4c 	bl	8000d48 <LCD_Draw_Horizontal_Line>


		//Need to generate random shape in 1 quadrant
		uint32_t RandomNum = 0 ;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
		//if 1<x<25: first quadrant
		//if 25<x<50: second quadrant
		//if 50<x<75: third quadrant
		//if 75<x<100: fourth quadrant

		while(RandomNum < 75){
 80016b4:	e08f      	b.n	80017d6 <Level2+0x15e>

			RandomNum = 1+(getRandomNum() % 100);
 80016b6:	f000 fc6b 	bl	8001f90 <getRandomNum>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b59      	ldr	r3, [pc, #356]	; (8001824 <Level2+0x1ac>)
 80016be:	fba3 1302 	umull	r1, r3, r3, r2
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2164      	movs	r1, #100	; 0x64
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]

			if (RandomNum<25){
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b18      	cmp	r3, #24
 80016d4:	d821      	bhi.n	800171a <Level2+0xa2>

				LCD_Draw_Square(THIRD_QUARTER_LCD_PIXEL_WIDTH,THIRD_QUARTER_LCD_PIXEL_HEIGHT,40,LCD_COLOR_BLUE2);
 80016d6:	88b9      	ldrh	r1, [r7, #4]
 80016d8:	88f8      	ldrh	r0, [r7, #6]
 80016da:	f240 531f 	movw	r3, #1311	; 0x51f
 80016de:	2228      	movs	r2, #40	; 0x28
 80016e0:	f7ff fab9 	bl	8000c56 <LCD_Draw_Square>

				HAL_Delay(1000);
 80016e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e8:	f000 ffbe 	bl	8002668 <HAL_Delay>
				LCD_Clear(0,LCD_COLOR_WHITE);
 80016ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fa8b 	bl	8000c0c <LCD_Clear>
				LCD_Draw_Vertical_Line(HALF_LCD_PIXEL_WIDTH, 0, LCD_PIXEL_HEIGHT, LCD_COLOR_BLACK);
 80016f6:	89f8      	ldrh	r0, [r7, #14]
 80016f8:	2300      	movs	r3, #0
 80016fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016fe:	2100      	movs	r1, #0
 8001700:	f7ff fa5d 	bl	8000bbe <LCD_Draw_Vertical_Line>
				LCD_Draw_Horizontal_Line(0, HALF_LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH, LCD_COLOR_BLACK);
 8001704:	89b9      	ldrh	r1, [r7, #12]
 8001706:	2300      	movs	r3, #0
 8001708:	22f0      	movs	r2, #240	; 0xf0
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fb1c 	bl	8000d48 <LCD_Draw_Horizontal_Line>

				HAL_Delay(500);
 8001710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001714:	f000 ffa8 	bl	8002668 <HAL_Delay>
 8001718:	e05d      	b.n	80017d6 <Level2+0x15e>

			} else if(RandomNum >= 25 && RandomNum<50){
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b18      	cmp	r3, #24
 800171e:	d924      	bls.n	800176a <Level2+0xf2>
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	2b31      	cmp	r3, #49	; 0x31
 8001724:	d821      	bhi.n	800176a <Level2+0xf2>

				LCD_Draw_Square(QUARTER_LCD_PIXEL_WIDTH,THIRD_QUARTER_LCD_PIXEL_HEIGHT,40,LCD_COLOR_BLUE2);
 8001726:	88b9      	ldrh	r1, [r7, #4]
 8001728:	8978      	ldrh	r0, [r7, #10]
 800172a:	f240 531f 	movw	r3, #1311	; 0x51f
 800172e:	2228      	movs	r2, #40	; 0x28
 8001730:	f7ff fa91 	bl	8000c56 <LCD_Draw_Square>

				 HAL_Delay(1000);
 8001734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001738:	f000 ff96 	bl	8002668 <HAL_Delay>
				 LCD_Clear(0,LCD_COLOR_WHITE);
 800173c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fa63 	bl	8000c0c <LCD_Clear>
				 LCD_Draw_Vertical_Line(HALF_LCD_PIXEL_WIDTH, 0, LCD_PIXEL_HEIGHT, LCD_COLOR_BLACK);
 8001746:	89f8      	ldrh	r0, [r7, #14]
 8001748:	2300      	movs	r3, #0
 800174a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800174e:	2100      	movs	r1, #0
 8001750:	f7ff fa35 	bl	8000bbe <LCD_Draw_Vertical_Line>
			     LCD_Draw_Horizontal_Line(0, HALF_LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH, LCD_COLOR_BLACK);
 8001754:	89b9      	ldrh	r1, [r7, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	22f0      	movs	r2, #240	; 0xf0
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff faf4 	bl	8000d48 <LCD_Draw_Horizontal_Line>

			     HAL_Delay(500);
 8001760:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001764:	f000 ff80 	bl	8002668 <HAL_Delay>
 8001768:	e035      	b.n	80017d6 <Level2+0x15e>

			} else if(RandomNum >= 50 && RandomNum<75){
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b31      	cmp	r3, #49	; 0x31
 800176e:	d924      	bls.n	80017ba <Level2+0x142>
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	2b4a      	cmp	r3, #74	; 0x4a
 8001774:	d821      	bhi.n	80017ba <Level2+0x142>

				LCD_Draw_Square(QUARTER_LCD_PIXEL_WIDTH,QUARTER_LCD_PIXEL_HEIGHT,40,LCD_COLOR_BLUE2);
 8001776:	8939      	ldrh	r1, [r7, #8]
 8001778:	8978      	ldrh	r0, [r7, #10]
 800177a:	f240 531f 	movw	r3, #1311	; 0x51f
 800177e:	2228      	movs	r2, #40	; 0x28
 8001780:	f7ff fa69 	bl	8000c56 <LCD_Draw_Square>

				HAL_Delay(1000);
 8001784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001788:	f000 ff6e 	bl	8002668 <HAL_Delay>
				LCD_Clear(0,LCD_COLOR_WHITE);
 800178c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fa3b 	bl	8000c0c <LCD_Clear>
				LCD_Draw_Vertical_Line(HALF_LCD_PIXEL_WIDTH, 0, LCD_PIXEL_HEIGHT, LCD_COLOR_BLACK);
 8001796:	89f8      	ldrh	r0, [r7, #14]
 8001798:	2300      	movs	r3, #0
 800179a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800179e:	2100      	movs	r1, #0
 80017a0:	f7ff fa0d 	bl	8000bbe <LCD_Draw_Vertical_Line>
				LCD_Draw_Horizontal_Line(0, HALF_LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH, LCD_COLOR_BLACK);
 80017a4:	89b9      	ldrh	r1, [r7, #12]
 80017a6:	2300      	movs	r3, #0
 80017a8:	22f0      	movs	r2, #240	; 0xf0
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff facc 	bl	8000d48 <LCD_Draw_Horizontal_Line>

				HAL_Delay(500);
 80017b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017b4:	f000 ff58 	bl	8002668 <HAL_Delay>
 80017b8:	e00d      	b.n	80017d6 <Level2+0x15e>

			}else if(RandomNum>=75){  //Quad 4
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b4a      	cmp	r3, #74	; 0x4a
 80017be:	d90a      	bls.n	80017d6 <Level2+0x15e>
				LCD_Draw_Square(THIRD_QUARTER_LCD_PIXEL_WIDTH,QUARTER_LCD_PIXEL_HEIGHT,40,LCD_COLOR_BLUE2);
 80017c0:	8939      	ldrh	r1, [r7, #8]
 80017c2:	88f8      	ldrh	r0, [r7, #6]
 80017c4:	f240 531f 	movw	r3, #1311	; 0x51f
 80017c8:	2228      	movs	r2, #40	; 0x28
 80017ca:	f7ff fa44 	bl	8000c56 <LCD_Draw_Square>
				time2 = HAL_GetTick();
 80017ce:	f000 ff3f 	bl	8002650 <HAL_GetTick>
 80017d2:	6178      	str	r0, [r7, #20]
				break;
 80017d4:	e003      	b.n	80017de <Level2+0x166>
		while(RandomNum < 75){
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b4a      	cmp	r3, #74	; 0x4a
 80017da:	f67f af6c 	bls.w	80016b6 <Level2+0x3e>
			}
		}
		button_Pressed = 0;
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <Level2+0x1b0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		while(button_Pressed == 0){
 80017e4:	bf00      	nop
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <Level2+0x1b0>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f083 0301 	eor.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f8      	bne.n	80017e6 <Level2+0x16e>

		}
		button_Pressed = 0;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <Level2+0x1b0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
		LCD_Clear(0,LCD_COLOR_WHITE);
 80017fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fa04 	bl	8000c0c <LCD_Clear>

		endTime2 = HAL_GetTick();
 8001804:	f000 ff24 	bl	8002650 <HAL_GetTick>
 8001808:	6038      	str	r0, [r7, #0]
		totalTime2 = endTime2 - time2;
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <Level2+0x1b4>)
 8001812:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 8001814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001818:	f000 ff26 	bl	8002668 <HAL_Delay>

}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	51eb851f 	.word	0x51eb851f
 8001828:	20000180 	.word	0x20000180
 800182c:	2000017c 	.word	0x2000017c

08001830 <Level3>:


//Level 3: Circle traverses the screen, times the user's reaction to the ball crossing a centered vertical line
void Level3 (void){
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0

	inLevelThree = true;
 8001836:	4b53      	ldr	r3, [pc, #332]	; (8001984 <Level3+0x154>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]


	uint16_t length = LCD_PIXEL_WIDTH;
 800183c:	23f0      	movs	r3, #240	; 0xf0
 800183e:	80fb      	strh	r3, [r7, #6]

	uint16_t HALF_LCD_PIXEL_WIDTH = LCD_PIXEL_WIDTH/2;
 8001840:	2378      	movs	r3, #120	; 0x78
 8001842:	80bb      	strh	r3, [r7, #4]


//Generate a circle
////Generate vertical line
	while(counter < 3){
 8001844:	e08b      	b.n	800195e <Level3+0x12e>
			for(int i=-((length/2)-30); i<(length/2)-30; i++){//move ball right
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	f1c3 031e 	rsb	r3, r3, #30
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e03d      	b.n	80018d0 <Level3+0xa0>
				LCD_Draw_Vertical_Line(HALF_LCD_PIXEL_WIDTH, 0, LCD_PIXEL_HEIGHT, LCD_COLOR_BLACK);
 8001854:	88b8      	ldrh	r0, [r7, #4]
 8001856:	2300      	movs	r3, #0
 8001858:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800185c:	2100      	movs	r1, #0
 800185e:	f7ff f9ae 	bl	8000bbe <LCD_Draw_Vertical_Line>
				LCD_Draw_Circle_Fill(125+i,150,20,LCD_COLOR_RED);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	b29b      	uxth	r3, r3
 8001866:	337d      	adds	r3, #125	; 0x7d
 8001868:	b298      	uxth	r0, r3
 800186a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800186e:	2214      	movs	r2, #20
 8001870:	2196      	movs	r1, #150	; 0x96
 8001872:	f7ff f951 	bl	8000b18 <LCD_Draw_Circle_Fill>
				HAL_Delay(1);
 8001876:	2001      	movs	r0, #1
 8001878:	f000 fef6 	bl	8002668 <HAL_Delay>
				LCD_Clear(0, LCD_COLOR_WHITE);
 800187c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff f9c3 	bl	8000c0c <LCD_Clear>
				HAL_Delay(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f000 feee 	bl	8002668 <HAL_Delay>

				if(counter == 0 && i == 0){
 800188c:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <Level3+0x158>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10b      	bne.n	80018ac <Level3+0x7c>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d108      	bne.n	80018ac <Level3+0x7c>
					firstTime3 = HAL_GetTick();
 800189a:	f000 fed9 	bl	8002650 <HAL_GetTick>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a3a      	ldr	r2, [pc, #232]	; (800198c <Level3+0x15c>)
 80018a2:	6013      	str	r3, [r2, #0]
					validInput = true;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <Level3+0x160>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e00e      	b.n	80018ca <Level3+0x9a>
				}else if(counter == 2 && i == 0){
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <Level3+0x158>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d10a      	bne.n	80018ca <Level3+0x9a>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d107      	bne.n	80018ca <Level3+0x9a>
					thirdTime3 = HAL_GetTick();
 80018ba:	f000 fec9 	bl	8002650 <HAL_GetTick>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a34      	ldr	r2, [pc, #208]	; (8001994 <Level3+0x164>)
 80018c2:	6013      	str	r3, [r2, #0]
					validInput = true;
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <Level3+0x160>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
			for(int i=-((length/2)-30); i<(length/2)-30; i++){//move ball right
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3b1e      	subs	r3, #30
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbba      	blt.n	8001854 <Level3+0x24>
				}

			}
			if(counter != 3){
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <Level3+0x158>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d03b      	beq.n	800195e <Level3+0x12e>
			for(int j=(length/2)-30; j>-((length/2)-30); j--){ //move ball left
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b1e      	subs	r3, #30
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	e02d      	b.n	800194e <Level3+0x11e>
				LCD_Draw_Vertical_Line(HALF_LCD_PIXEL_WIDTH, 0, LCD_PIXEL_HEIGHT, LCD_COLOR_BLACK);
 80018f2:	88b8      	ldrh	r0, [r7, #4]
 80018f4:	2300      	movs	r3, #0
 80018f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018fa:	2100      	movs	r1, #0
 80018fc:	f7ff f95f 	bl	8000bbe <LCD_Draw_Vertical_Line>
				//start time when ball crosses line
				LCD_Draw_Circle_Fill(125+(j),150,20,LCD_COLOR_RED);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	b29b      	uxth	r3, r3
 8001904:	337d      	adds	r3, #125	; 0x7d
 8001906:	b298      	uxth	r0, r3
 8001908:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800190c:	2214      	movs	r2, #20
 800190e:	2196      	movs	r1, #150	; 0x96
 8001910:	f7ff f902 	bl	8000b18 <LCD_Draw_Circle_Fill>
				HAL_Delay(1);
 8001914:	2001      	movs	r0, #1
 8001916:	f000 fea7 	bl	8002668 <HAL_Delay>
				LCD_Clear(0, LCD_COLOR_WHITE);
 800191a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff f974 	bl	8000c0c <LCD_Clear>
				HAL_Delay(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f000 fe9f 	bl	8002668 <HAL_Delay>

				if(counter == 1 && j == 0){
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <Level3+0x158>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10a      	bne.n	8001948 <Level3+0x118>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <Level3+0x118>
					secondTime3 = HAL_GetTick();
 8001938:	f000 fe8a 	bl	8002650 <HAL_GetTick>
 800193c:	4603      	mov	r3, r0
 800193e:	4a16      	ldr	r2, [pc, #88]	; (8001998 <Level3+0x168>)
 8001940:	6013      	str	r3, [r2, #0]
					validInput = true;
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <Level3+0x160>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
			for(int j=(length/2)-30; j>-((length/2)-30); j--){ //move ball left
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3b01      	subs	r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	b29b      	uxth	r3, r3
 8001954:	f1c3 031e 	rsb	r3, r3, #30
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	dcc9      	bgt.n	80018f2 <Level3+0xc2>
	while(counter < 3){
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <Level3+0x158>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b02      	cmp	r3, #2
 8001964:	f77f af6f 	ble.w	8001846 <Level3+0x16>
			}
		}

		}

	timeDisplay(totalTime1, totalTime2, aveTime3);
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <Level3+0x16c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <Level3+0x170>)
 800196e:	6811      	ldr	r1, [r2, #0]
 8001970:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <Level3+0x174>)
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fce5 	bl	8001344 <timeDisplay>

}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000181 	.word	0x20000181
 8001988:	20000184 	.word	0x20000184
 800198c:	20000194 	.word	0x20000194
 8001990:	200001a4 	.word	0x200001a4
 8001994:	2000019c 	.word	0x2000019c
 8001998:	20000198 	.word	0x20000198
 800199c:	20000178 	.word	0x20000178
 80019a0:	2000017c 	.word	0x2000017c
 80019a4:	200001a0 	.word	0x200001a0

080019a8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019ac:	f000 f9fe 	bl	8001dac <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80019b0:	20ca      	movs	r0, #202	; 0xca
 80019b2:	f000 f943 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80019b6:	20c3      	movs	r0, #195	; 0xc3
 80019b8:	f000 f94d 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80019bc:	2008      	movs	r0, #8
 80019be:	f000 f94a 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80019c2:	2050      	movs	r0, #80	; 0x50
 80019c4:	f000 f947 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80019c8:	20cf      	movs	r0, #207	; 0xcf
 80019ca:	f000 f937 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 f941 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80019d4:	20c1      	movs	r0, #193	; 0xc1
 80019d6:	f000 f93e 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80019da:	2030      	movs	r0, #48	; 0x30
 80019dc:	f000 f93b 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80019e0:	20ed      	movs	r0, #237	; 0xed
 80019e2:	f000 f92b 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80019e6:	2064      	movs	r0, #100	; 0x64
 80019e8:	f000 f935 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f000 f932 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80019f2:	2012      	movs	r0, #18
 80019f4:	f000 f92f 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80019f8:	2081      	movs	r0, #129	; 0x81
 80019fa:	f000 f92c 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80019fe:	20e8      	movs	r0, #232	; 0xe8
 8001a00:	f000 f91c 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001a04:	2085      	movs	r0, #133	; 0x85
 8001a06:	f000 f926 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f923 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001a10:	2078      	movs	r0, #120	; 0x78
 8001a12:	f000 f920 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001a16:	20cb      	movs	r0, #203	; 0xcb
 8001a18:	f000 f910 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001a1c:	2039      	movs	r0, #57	; 0x39
 8001a1e:	f000 f91a 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001a22:	202c      	movs	r0, #44	; 0x2c
 8001a24:	f000 f917 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f914 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001a2e:	2034      	movs	r0, #52	; 0x34
 8001a30:	f000 f911 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001a34:	2002      	movs	r0, #2
 8001a36:	f000 f90e 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001a3a:	20f7      	movs	r0, #247	; 0xf7
 8001a3c:	f000 f8fe 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001a40:	2020      	movs	r0, #32
 8001a42:	f000 f908 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001a46:	20ea      	movs	r0, #234	; 0xea
 8001a48:	f000 f8f8 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 f902 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f8ff 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001a58:	20b1      	movs	r0, #177	; 0xb1
 8001a5a:	f000 f8ef 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f8f9 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001a64:	201b      	movs	r0, #27
 8001a66:	f000 f8f6 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001a6a:	20b6      	movs	r0, #182	; 0xb6
 8001a6c:	f000 f8e6 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001a70:	200a      	movs	r0, #10
 8001a72:	f000 f8f0 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001a76:	20a2      	movs	r0, #162	; 0xa2
 8001a78:	f000 f8ed 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001a7c:	20c0      	movs	r0, #192	; 0xc0
 8001a7e:	f000 f8dd 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001a82:	2010      	movs	r0, #16
 8001a84:	f000 f8e7 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001a88:	20c1      	movs	r0, #193	; 0xc1
 8001a8a:	f000 f8d7 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001a8e:	2010      	movs	r0, #16
 8001a90:	f000 f8e1 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001a94:	20c5      	movs	r0, #197	; 0xc5
 8001a96:	f000 f8d1 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001a9a:	2045      	movs	r0, #69	; 0x45
 8001a9c:	f000 f8db 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001aa0:	2015      	movs	r0, #21
 8001aa2:	f000 f8d8 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001aa6:	20c7      	movs	r0, #199	; 0xc7
 8001aa8:	f000 f8c8 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001aac:	2090      	movs	r0, #144	; 0x90
 8001aae:	f000 f8d2 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001ab2:	2036      	movs	r0, #54	; 0x36
 8001ab4:	f000 f8c2 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001ab8:	20c8      	movs	r0, #200	; 0xc8
 8001aba:	f000 f8cc 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001abe:	20f2      	movs	r0, #242	; 0xf2
 8001ac0:	f000 f8bc 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f8c6 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001aca:	20b0      	movs	r0, #176	; 0xb0
 8001acc:	f000 f8b6 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001ad0:	20c2      	movs	r0, #194	; 0xc2
 8001ad2:	f000 f8c0 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001ad6:	20b6      	movs	r0, #182	; 0xb6
 8001ad8:	f000 f8b0 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001adc:	200a      	movs	r0, #10
 8001ade:	f000 f8ba 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001ae2:	20a7      	movs	r0, #167	; 0xa7
 8001ae4:	f000 f8b7 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001ae8:	2027      	movs	r0, #39	; 0x27
 8001aea:	f000 f8b4 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001aee:	2004      	movs	r0, #4
 8001af0:	f000 f8b1 	bl	8001c56 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001af4:	202a      	movs	r0, #42	; 0x2a
 8001af6:	f000 f8a1 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f8ab 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f000 f8a8 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f8a5 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001b0c:	20ef      	movs	r0, #239	; 0xef
 8001b0e:	f000 f8a2 	bl	8001c56 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001b12:	202b      	movs	r0, #43	; 0x2b
 8001b14:	f000 f892 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f000 f89c 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f000 f899 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f000 f896 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001b2a:	203f      	movs	r0, #63	; 0x3f
 8001b2c:	f000 f893 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001b30:	20f6      	movs	r0, #246	; 0xf6
 8001b32:	f000 f883 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f000 f88d 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f000 f88a 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001b42:	2006      	movs	r0, #6
 8001b44:	f000 f887 	bl	8001c56 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001b48:	202c      	movs	r0, #44	; 0x2c
 8001b4a:	f000 f877 	bl	8001c3c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001b4e:	20c8      	movs	r0, #200	; 0xc8
 8001b50:	f000 f9e8 	bl	8001f24 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001b54:	2026      	movs	r0, #38	; 0x26
 8001b56:	f000 f871 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f000 f87b 	bl	8001c56 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001b60:	20e0      	movs	r0, #224	; 0xe0
 8001b62:	f000 f86b 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f000 f875 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001b6c:	2029      	movs	r0, #41	; 0x29
 8001b6e:	f000 f872 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001b72:	2024      	movs	r0, #36	; 0x24
 8001b74:	f000 f86f 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001b78:	200c      	movs	r0, #12
 8001b7a:	f000 f86c 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001b7e:	200e      	movs	r0, #14
 8001b80:	f000 f869 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001b84:	2009      	movs	r0, #9
 8001b86:	f000 f866 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001b8a:	204e      	movs	r0, #78	; 0x4e
 8001b8c:	f000 f863 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001b90:	2078      	movs	r0, #120	; 0x78
 8001b92:	f000 f860 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001b96:	203c      	movs	r0, #60	; 0x3c
 8001b98:	f000 f85d 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001b9c:	2009      	movs	r0, #9
 8001b9e:	f000 f85a 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001ba2:	2013      	movs	r0, #19
 8001ba4:	f000 f857 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001ba8:	2005      	movs	r0, #5
 8001baa:	f000 f854 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001bae:	2017      	movs	r0, #23
 8001bb0:	f000 f851 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001bb4:	2011      	movs	r0, #17
 8001bb6:	f000 f84e 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f84b 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001bc0:	20e1      	movs	r0, #225	; 0xe1
 8001bc2:	f000 f83b 	bl	8001c3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f845 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001bcc:	2016      	movs	r0, #22
 8001bce:	f000 f842 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001bd2:	201b      	movs	r0, #27
 8001bd4:	f000 f83f 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001bd8:	2004      	movs	r0, #4
 8001bda:	f000 f83c 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001bde:	2011      	movs	r0, #17
 8001be0:	f000 f839 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001be4:	2007      	movs	r0, #7
 8001be6:	f000 f836 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001bea:	2031      	movs	r0, #49	; 0x31
 8001bec:	f000 f833 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001bf0:	2033      	movs	r0, #51	; 0x33
 8001bf2:	f000 f830 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001bf6:	2042      	movs	r0, #66	; 0x42
 8001bf8:	f000 f82d 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001bfc:	2005      	movs	r0, #5
 8001bfe:	f000 f82a 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001c02:	200c      	movs	r0, #12
 8001c04:	f000 f827 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f000 f824 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001c0e:	2028      	movs	r0, #40	; 0x28
 8001c10:	f000 f821 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001c14:	202f      	movs	r0, #47	; 0x2f
 8001c16:	f000 f81e 	bl	8001c56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f000 f81b 	bl	8001c56 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001c20:	2011      	movs	r0, #17
 8001c22:	f000 f80b 	bl	8001c3c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001c26:	20c8      	movs	r0, #200	; 0xc8
 8001c28:	f000 f97c 	bl	8001f24 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001c2c:	2029      	movs	r0, #41	; 0x29
 8001c2e:	f000 f805 	bl	8001c3c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001c32:	202c      	movs	r0, #44	; 0x2c
 8001c34:	f000 f802 	bl	8001c3c <ili9341_Write_Reg>
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f949 	bl	8001ee0 <LCD_IO_WriteReg>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f91a 	bl	8001e9c <LCD_IO_WriteData>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001c74:	4819      	ldr	r0, [pc, #100]	; (8001cdc <SPI_Init+0x6c>)
 8001c76:	f002 fc36 	bl	80044e6 <HAL_SPI_GetState>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d12b      	bne.n	8001cd8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <SPI_Init+0x6c>)
 8001c82:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <SPI_Init+0x70>)
 8001c84:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <SPI_Init+0x6c>)
 8001c88:	2218      	movs	r2, #24
 8001c8a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <SPI_Init+0x6c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <SPI_Init+0x6c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <SPI_Init+0x6c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <SPI_Init+0x6c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <SPI_Init+0x6c>)
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <SPI_Init+0x6c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <SPI_Init+0x6c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <SPI_Init+0x6c>)
 8001cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cbc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <SPI_Init+0x6c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <SPI_Init+0x6c>)
 8001cc6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cca:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <SPI_Init+0x6c>)
 8001cce:	f000 f833 	bl	8001d38 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001cd2:	4802      	ldr	r0, [pc, #8]	; (8001cdc <SPI_Init+0x6c>)
 8001cd4:	f002 fa1a 	bl	800410c <HAL_SPI_Init>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200001a8 	.word	0x200001a8
 8001ce0:	40015000 	.word	0x40015000

08001ce4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <SPI_Write+0x34>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	1db9      	adds	r1, r7, #6
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4808      	ldr	r0, [pc, #32]	; (8001d1c <SPI_Write+0x38>)
 8001cfc:	f002 fab7 	bl	800426e <HAL_SPI_Transmit>
 8001d00:	4603      	mov	r3, r0
 8001d02:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001d0a:	f000 f809 	bl	8001d20 <SPI_Error>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	200001a8 	.word	0x200001a8

08001d20 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001d24:	4803      	ldr	r0, [pc, #12]	; (8001d34 <SPI_Error+0x14>)
 8001d26:	f002 fa7a 	bl	800421e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001d2a:	f7ff ffa1 	bl	8001c70 <SPI_Init>
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200001a8 	.word	0x200001a8

08001d38 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <SPI_MspInit+0x6c>)
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <SPI_MspInit+0x6c>)
 8001d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <SPI_MspInit+0x6c>)
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <SPI_MspInit+0x6c>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <SPI_MspInit+0x6c>)
 8001d66:	f043 0320 	orr.w	r3, r3, #32
 8001d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <SPI_MspInit+0x6c>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001d78:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001d86:	2301      	movs	r3, #1
 8001d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <SPI_MspInit+0x70>)
 8001d96:	f000 fd9d 	bl	80028d4 <HAL_GPIO_Init>
}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40021400 	.word	0x40021400

08001dac <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <LCD_IO_Init+0xe0>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d164      	bne.n	8001e84 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <LCD_IO_Init+0xe0>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <LCD_IO_Init+0xe4>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a31      	ldr	r2, [pc, #196]	; (8001e90 <LCD_IO_Init+0xe4>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <LCD_IO_Init+0xe4>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4619      	mov	r1, r3
 8001df4:	4827      	ldr	r0, [pc, #156]	; (8001e94 <LCD_IO_Init+0xe8>)
 8001df6:	f000 fd6d 	bl	80028d4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <LCD_IO_Init+0xe4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <LCD_IO_Init+0xe4>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <LCD_IO_Init+0xe4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4819      	ldr	r0, [pc, #100]	; (8001e94 <LCD_IO_Init+0xe8>)
 8001e30:	f000 fd50 	bl	80028d4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <LCD_IO_Init+0xe4>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <LCD_IO_Init+0xe4>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <LCD_IO_Init+0xe4>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001e50:	2304      	movs	r3, #4
 8001e52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4619      	mov	r1, r3
 8001e66:	480c      	ldr	r0, [pc, #48]	; (8001e98 <LCD_IO_Init+0xec>)
 8001e68:	f000 fd34 	bl	80028d4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2104      	movs	r1, #4
 8001e70:	4809      	ldr	r0, [pc, #36]	; (8001e98 <LCD_IO_Init+0xec>)
 8001e72:	f000 ffe7 	bl	8002e44 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001e76:	2201      	movs	r2, #1
 8001e78:	2104      	movs	r1, #4
 8001e7a:	4807      	ldr	r0, [pc, #28]	; (8001e98 <LCD_IO_Init+0xec>)
 8001e7c:	f000 ffe2 	bl	8002e44 <HAL_GPIO_WritePin>

    SPI_Init();
 8001e80:	f7ff fef6 	bl	8001c70 <SPI_Init>
  }
}
 8001e84:	bf00      	nop
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20025a00 	.word	0x20025a00
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40020800 	.word	0x40020800

08001e9c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eac:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <LCD_IO_WriteData+0x3c>)
 8001eae:	f000 ffc9 	bl	8002e44 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <LCD_IO_WriteData+0x40>)
 8001eb8:	f000 ffc4 	bl	8002e44 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff10 	bl	8001ce4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <LCD_IO_WriteData+0x40>)
 8001eca:	f000 ffbb 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40020800 	.word	0x40020800

08001ee0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef0:	480a      	ldr	r0, [pc, #40]	; (8001f1c <LCD_IO_WriteReg+0x3c>)
 8001ef2:	f000 ffa7 	bl	8002e44 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2104      	movs	r1, #4
 8001efa:	4809      	ldr	r0, [pc, #36]	; (8001f20 <LCD_IO_WriteReg+0x40>)
 8001efc:	f000 ffa2 	bl	8002e44 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff feed 	bl	8001ce4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	4804      	ldr	r0, [pc, #16]	; (8001f20 <LCD_IO_WriteReg+0x40>)
 8001f10:	f000 ff98 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40020c00 	.word	0x40020c00
 8001f20:	40020800 	.word	0x40020800

08001f24 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fb9b 	bl	8002668 <HAL_Delay>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <RNG_Init>:

/**@brief
 * Initializes the Random Number Generator peripheral
 * Configures the RNG and enables the clock
*/
void RNG_Init(){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0

	RNGInitConfig.Instance = RNG;    /*!< Register base address   */
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <RNG_Init+0x48>)
 8001f44:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <RNG_Init+0x4c>)
 8001f46:	601a      	str	r2, [r3, #0]

	__HAL_RCC_RNG_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <RNG_Init+0x50>)
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <RNG_Init+0x50>)
 8001f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f56:	6353      	str	r3, [r2, #52]	; 0x34
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <RNG_Init+0x50>)
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
	__HAL_RNG_ENABLE(&RNGInitConfig);
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <RNG_Init+0x48>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <RNG_Init+0x48>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0204 	orr.w	r2, r2, #4
 8001f72:	601a      	str	r2, [r3, #0]
	HAL_RNG_Init(&RNGInitConfig);
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <RNG_Init+0x48>)
 8001f76:	f002 f849 	bl	800400c <HAL_RNG_Init>

}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20025a04 	.word	0x20025a04
 8001f88:	50060800 	.word	0x50060800
 8001f8c:	40023800 	.word	0x40023800

08001f90 <getRandomNum>:

 /**Function returns a randomly generated number.
 *Used for randomization of other game properties: shapes and locations
 *@retval unsigned 32-bit integer to be used as the random number
 */
uint32_t getRandomNum(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0

	uint32_t randomNumber;

	HAL_RNG_GenerateRandomNumber(&RNGInitConfig, &randomNumber);
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4804      	ldr	r0, [pc, #16]	; (8001fac <getRandomNum+0x1c>)
 8001f9c:	f002 f860 	bl	8004060 <HAL_RNG_GenerateRandomNumber>

	return randomNumber;
 8001fa0:	687b      	ldr	r3, [r7, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20025a04 	.word	0x20025a04

08001fb0 <addSchedulerEvent>:
static uint32_t scheduledEvents;

/**Schedules an event to be completed later
 *
 */
void addSchedulerEvent(uint32_t event){
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <addSchedulerEvent+0x20>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	4a03      	ldr	r2, [pc, #12]	; (8001fd0 <addSchedulerEvent+0x20>)
 8001fc2:	6013      	str	r3, [r2, #0]
};
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	20025a14 	.word	0x20025a14

08001fd4 <removeSchedulerEvent>:

/**Removes a scheduled event (typically after it has been called and completed)
 *
 */
void removeSchedulerEvent(uint32_t event){
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~event;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <removeSchedulerEvent+0x24>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <removeSchedulerEvent+0x24>)
 8001fe8:	6013      	str	r3, [r2, #0]
};
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20025a14 	.word	0x20025a14

08001ffc <getScheduledEvents>:

/**Get function to check which events have been scheduled
 * @retval unsigned 32-bit value
 */
uint32_t getScheduledEvents(){
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <getScheduledEvents+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
};
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20025a14 	.word	0x20025a14

08002014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
initialise_monitor_handles();
 800201a:	f002 fd55 	bl	8004ac8 <initialise_monitor_handles>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800201e:	f000 fab1 	bl	8002584 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  systemClockOverride();
 8002022:	f000 f82b 	bl	800207c <systemClockOverride>

  ApplicationInit();
 8002026:	f7fe fa67 	bl	80004f8 <ApplicationInit>

  //RunDemoForLCD();

  while (1)
  {
	  eventsToRun = getScheduledEvents();
 800202a:	f7ff ffe7 	bl	8001ffc <getScheduledEvents>
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]

	  if(eventsToRun & LEVEL1){
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <main+0x36>
		  level1Instructions();
 800203c:	f7fe ff2c 	bl	8000e98 <level1Instructions>
		  Level1();
 8002040:	f7ff fa94 	bl	800156c <Level1>

		  removeSchedulerEvent(LEVEL1);
 8002044:	2002      	movs	r0, #2
 8002046:	f7ff ffc5 	bl	8001fd4 <removeSchedulerEvent>

	  }
	  if(eventsToRun & LEVEL2){
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <main+0x4e>
		  level2Instructions();
 8002054:	f7fe ffb6 	bl	8000fc4 <level2Instructions>
		  Level2();
 8002058:	f7ff fb0e 	bl	8001678 <Level2>

		  removeSchedulerEvent(LEVEL2);
 800205c:	2004      	movs	r0, #4
 800205e:	f7ff ffb9 	bl	8001fd4 <removeSchedulerEvent>

	  }
	  if(eventsToRun & LEVEL3){
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0de      	beq.n	800202a <main+0x16>
		  level3Instructions();
 800206c:	f7ff f88c 	bl	8001188 <level3Instructions>
		  Level3();
 8002070:	f7ff fbde 	bl	8001830 <Level3>

		  removeSchedulerEvent(LEVEL3);
 8002074:	2008      	movs	r0, #8
 8002076:	f7ff ffad 	bl	8001fd4 <removeSchedulerEvent>
	  eventsToRun = getScheduledEvents();
 800207a:	e7d6      	b.n	800202a <main+0x16>

0800207c <systemClockOverride>:
    Error_Handler();
  }
}

void systemClockOverride(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b092      	sub	sp, #72	; 0x48
 8002080:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <systemClockOverride+0x7c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <systemClockOverride+0x7c>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <systemClockOverride+0x7c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800209e:	2301      	movs	r3, #1
 80020a0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020b2:	2308      	movs	r3, #8
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80020b6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020bc:	2302      	movs	r3, #2
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020c0:	2307      	movs	r3, #7
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 f97c 	bl	80033c4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80020cc:	230f      	movs	r3, #15
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d0:	2302      	movs	r3, #2
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80020e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020e8:	2105      	movs	r1, #5
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fbe2 	bl	80038b4 <HAL_RCC_ClockConfig>
}
 80020f0:	bf00      	nop
 80020f2:	3748      	adds	r7, #72	; 0x48
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023800 	.word	0x40023800

080020fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002100:	b672      	cpsid	i
}
 8002102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002104:	e7fe      	b.n	8002104 <Error_Handler+0x8>
	...

08002108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_MspInit+0x4c>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <HAL_MspInit+0x4c>)
 8002118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HAL_MspInit+0x4c>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_MspInit+0x4c>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_MspInit+0x4c>)
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_MspInit+0x4c>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002146:	2007      	movs	r0, #7
 8002148:	f000 fb82 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b09a      	sub	sp, #104	; 0x68
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002174:	2230      	movs	r2, #48	; 0x30
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f002 fe54 	bl	8004e26 <memset>
  if(hltdc->Instance==LTDC)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a81      	ldr	r2, [pc, #516]	; (8002388 <HAL_LTDC_MspInit+0x230>)
 8002184:	4293      	cmp	r3, r2
 8002186:	f040 80fa 	bne.w	800237e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800218a:	2308      	movs	r3, #8
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 800218e:	2331      	movs	r3, #49	; 0x31
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002192:	2302      	movs	r3, #2
 8002194:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002196:	2300      	movs	r3, #0
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 fd74 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80021aa:	f7ff ffa7 	bl	80020fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
 80021b2:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_LTDC_MspInit+0x234>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a75      	ldr	r2, [pc, #468]	; (800238c <HAL_LTDC_MspInit+0x234>)
 80021b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b73      	ldr	r3, [pc, #460]	; (800238c <HAL_LTDC_MspInit+0x234>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_LTDC_MspInit+0x234>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a6e      	ldr	r2, [pc, #440]	; (800238c <HAL_LTDC_MspInit+0x234>)
 80021d4:	f043 0320 	orr.w	r3, r3, #32
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b6c      	ldr	r3, [pc, #432]	; (800238c <HAL_LTDC_MspInit+0x234>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	4b68      	ldr	r3, [pc, #416]	; (800238c <HAL_LTDC_MspInit+0x234>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a67      	ldr	r2, [pc, #412]	; (800238c <HAL_LTDC_MspInit+0x234>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_LTDC_MspInit+0x234>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	4b61      	ldr	r3, [pc, #388]	; (800238c <HAL_LTDC_MspInit+0x234>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a60      	ldr	r2, [pc, #384]	; (800238c <HAL_LTDC_MspInit+0x234>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b5e      	ldr	r3, [pc, #376]	; (800238c <HAL_LTDC_MspInit+0x234>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b5a      	ldr	r3, [pc, #360]	; (800238c <HAL_LTDC_MspInit+0x234>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a59      	ldr	r2, [pc, #356]	; (800238c <HAL_LTDC_MspInit+0x234>)
 8002228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b57      	ldr	r3, [pc, #348]	; (800238c <HAL_LTDC_MspInit+0x234>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_LTDC_MspInit+0x234>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_LTDC_MspInit+0x234>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_LTDC_MspInit+0x234>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b4c      	ldr	r3, [pc, #304]	; (800238c <HAL_LTDC_MspInit+0x234>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a4b      	ldr	r2, [pc, #300]	; (800238c <HAL_LTDC_MspInit+0x234>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <HAL_LTDC_MspInit+0x234>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002276:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002284:	230e      	movs	r3, #14
 8002286:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800228c:	4619      	mov	r1, r3
 800228e:	4840      	ldr	r0, [pc, #256]	; (8002390 <HAL_LTDC_MspInit+0x238>)
 8002290:	f000 fb20 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002294:	f641 0358 	movw	r3, #6232	; 0x1858
 8002298:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022a6:	230e      	movs	r3, #14
 80022a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022ae:	4619      	mov	r1, r3
 80022b0:	4838      	ldr	r0, [pc, #224]	; (8002394 <HAL_LTDC_MspInit+0x23c>)
 80022b2:	f000 fb0f 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80022b6:	2303      	movs	r3, #3
 80022b8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022c6:	2309      	movs	r3, #9
 80022c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022ce:	4619      	mov	r1, r3
 80022d0:	4831      	ldr	r0, [pc, #196]	; (8002398 <HAL_LTDC_MspInit+0x240>)
 80022d2:	f000 faff 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80022d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80022da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022e8:	230e      	movs	r3, #14
 80022ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f0:	4619      	mov	r1, r3
 80022f2:	4829      	ldr	r0, [pc, #164]	; (8002398 <HAL_LTDC_MspInit+0x240>)
 80022f4:	f000 faee 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80022f8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80022fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800230a:	230e      	movs	r3, #14
 800230c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800230e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002312:	4619      	mov	r1, r3
 8002314:	4821      	ldr	r0, [pc, #132]	; (800239c <HAL_LTDC_MspInit+0x244>)
 8002316:	f000 fadd 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800231a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800231e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800232c:	230e      	movs	r3, #14
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002334:	4619      	mov	r1, r3
 8002336:	481a      	ldr	r0, [pc, #104]	; (80023a0 <HAL_LTDC_MspInit+0x248>)
 8002338:	f000 facc 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800233c:	2348      	movs	r3, #72	; 0x48
 800233e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800234c:	230e      	movs	r3, #14
 800234e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002350:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002354:	4619      	mov	r1, r3
 8002356:	4813      	ldr	r0, [pc, #76]	; (80023a4 <HAL_LTDC_MspInit+0x24c>)
 8002358:	f000 fabc 	bl	80028d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800235c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002360:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800236e:	2309      	movs	r3, #9
 8002370:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002372:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002376:	4619      	mov	r1, r3
 8002378:	4808      	ldr	r0, [pc, #32]	; (800239c <HAL_LTDC_MspInit+0x244>)
 800237a:	f000 faab 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3768      	adds	r7, #104	; 0x68
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40016800 	.word	0x40016800
 800238c:	40023800 	.word	0x40023800
 8002390:	40021400 	.word	0x40021400
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400
 800239c:	40021800 	.word	0x40021800
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020c00 	.word	0x40020c00

080023a8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <HAL_RNG_MspInit+0x3c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10d      	bne.n	80023d6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_RNG_MspInit+0x40>)
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <HAL_RNG_MspInit+0x40>)
 80023c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c8:	6353      	str	r3, [r2, #52]	; 0x34
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RNG_MspInit+0x40>)
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	50060800 	.word	0x50060800
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_SPI_MspInit+0x84>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d12c      	bne.n	8002468 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_SPI_MspInit+0x88>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_SPI_MspInit+0x88>)
 8002418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_SPI_MspInit+0x88>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_SPI_MspInit+0x88>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a10      	ldr	r2, [pc, #64]	; (8002474 <HAL_SPI_MspInit+0x88>)
 8002434:	f043 0320 	orr.w	r3, r3, #32
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <HAL_SPI_MspInit+0x88>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002446:	f44f 7360 	mov.w	r3, #896	; 0x380
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002458:	2305      	movs	r3, #5
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <HAL_SPI_MspInit+0x8c>)
 8002464:	f000 fa36 	bl	80028d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40015000 	.word	0x40015000
 8002474:	40023800 	.word	0x40023800
 8002478:	40021400 	.word	0x40021400

0800247c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a08      	ldr	r2, [pc, #32]	; (80024ac <HAL_SPI_MspDeInit+0x30>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10a      	bne.n	80024a4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_SPI_MspDeInit+0x34>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_SPI_MspDeInit+0x34>)
 8002494:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800249a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_SPI_MspDeInit+0x38>)
 80024a0:	f000 fbc4 	bl	8002c2c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40015000 	.word	0x40015000
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40021400 	.word	0x40021400

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <NMI_Handler+0x4>

080024be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <MemManage_Handler+0x4>

080024ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002504:	f000 f890 	bl	8002628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <SystemInit+0x20>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	4a05      	ldr	r2, [pc, #20]	; (800252c <SystemInit+0x20>)
 8002518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800251c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002568 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002534:	480d      	ldr	r0, [pc, #52]	; (800256c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002536:	490e      	ldr	r1, [pc, #56]	; (8002570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800254c:	4c0b      	ldr	r4, [pc, #44]	; (800257c <LoopFillZerobss+0x26>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800255a:	f7ff ffd7 	bl	800250c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255e:	f002 fcb7 	bl	8004ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7ff fd57 	bl	8002014 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002568:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800256c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002570:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002574:	08006448 	.word	0x08006448
  ldr r2, =_sbss
 8002578:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800257c:	20025c10 	.word	0x20025c10

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>
	...

08002584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_Init+0x40>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_Init+0x40>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_Init+0x40>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f94f 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f000 f808 	bl	80025c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff fda6 	bl	8002108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_InitTick+0x54>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_InitTick+0x58>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025de:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f967 	bl	80028ba <HAL_SYSTICK_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00e      	b.n	8002614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d80a      	bhi.n	8002612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f000 f92f 	bl	8002866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <HAL_InitTick+0x5c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000010 	.word	0x20000010
 8002620:	20000018 	.word	0x20000018
 8002624:	20000014 	.word	0x20000014

08002628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_IncTick+0x20>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_IncTick+0x24>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a04      	ldr	r2, [pc, #16]	; (800264c <HAL_IncTick+0x24>)
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000018 	.word	0x20000018
 800264c:	20025a18 	.word	0x20025a18

08002650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return uwTick;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_GetTick+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20025a18 	.word	0x20025a18

08002668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff ffee 	bl	8002650 <HAL_GetTick>
 8002674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d005      	beq.n	800268e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_Delay+0x44>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800268e:	bf00      	nop
 8002690:	f7ff ffde 	bl	8002650 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	d8f7      	bhi.n	8002690 <HAL_Delay+0x28>
  {
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000018 	.word	0x20000018

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	; (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff29 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002878:	f7ff ff3e 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 800287c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff8e 	bl	80027a4 <NVIC_EncodePriority>
 8002888:	4602      	mov	r2, r0
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <__NVIC_SetPriority>
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff31 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ffa2 	bl	800280c <SysTick_Config>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	e177      	b.n	8002be0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f0:	2201      	movs	r2, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	429a      	cmp	r2, r3
 800290a:	f040 8166 	bne.w	8002bda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d005      	beq.n	8002926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002922:	2b02      	cmp	r3, #2
 8002924:	d130      	bne.n	8002988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 0201 	and.w	r2, r3, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b03      	cmp	r3, #3
 8002992:	d017      	beq.n	80029c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d123      	bne.n	8002a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	08da      	lsrs	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3208      	adds	r2, #8
 80029d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	220f      	movs	r2, #15
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3208      	adds	r2, #8
 8002a12:	69b9      	ldr	r1, [r7, #24]
 8002a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0203 	and.w	r2, r3, #3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80c0 	beq.w	8002bda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	4b66      	ldr	r3, [pc, #408]	; (8002bf8 <HAL_GPIO_Init+0x324>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a65      	ldr	r2, [pc, #404]	; (8002bf8 <HAL_GPIO_Init+0x324>)
 8002a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_GPIO_Init+0x324>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a76:	4a61      	ldr	r2, [pc, #388]	; (8002bfc <HAL_GPIO_Init+0x328>)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	; (8002c00 <HAL_GPIO_Init+0x32c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d037      	beq.n	8002b12 <HAL_GPIO_Init+0x23e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a57      	ldr	r2, [pc, #348]	; (8002c04 <HAL_GPIO_Init+0x330>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d031      	beq.n	8002b0e <HAL_GPIO_Init+0x23a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a56      	ldr	r2, [pc, #344]	; (8002c08 <HAL_GPIO_Init+0x334>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d02b      	beq.n	8002b0a <HAL_GPIO_Init+0x236>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a55      	ldr	r2, [pc, #340]	; (8002c0c <HAL_GPIO_Init+0x338>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d025      	beq.n	8002b06 <HAL_GPIO_Init+0x232>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_GPIO_Init+0x33c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01f      	beq.n	8002b02 <HAL_GPIO_Init+0x22e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a53      	ldr	r2, [pc, #332]	; (8002c14 <HAL_GPIO_Init+0x340>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d019      	beq.n	8002afe <HAL_GPIO_Init+0x22a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a52      	ldr	r2, [pc, #328]	; (8002c18 <HAL_GPIO_Init+0x344>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_GPIO_Init+0x226>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a51      	ldr	r2, [pc, #324]	; (8002c1c <HAL_GPIO_Init+0x348>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00d      	beq.n	8002af6 <HAL_GPIO_Init+0x222>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a50      	ldr	r2, [pc, #320]	; (8002c20 <HAL_GPIO_Init+0x34c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <HAL_GPIO_Init+0x21e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4f      	ldr	r2, [pc, #316]	; (8002c24 <HAL_GPIO_Init+0x350>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_GPIO_Init+0x21a>
 8002aea:	2309      	movs	r3, #9
 8002aec:	e012      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002aee:	230a      	movs	r3, #10
 8002af0:	e010      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002af2:	2308      	movs	r3, #8
 8002af4:	e00e      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002af6:	2307      	movs	r3, #7
 8002af8:	e00c      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002afa:	2306      	movs	r3, #6
 8002afc:	e00a      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002afe:	2305      	movs	r3, #5
 8002b00:	e008      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002b02:	2304      	movs	r3, #4
 8002b04:	e006      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e004      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e002      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_GPIO_Init+0x240>
 8002b12:	2300      	movs	r3, #0
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f002 0203 	and.w	r2, r2, #3
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	4093      	lsls	r3, r2
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b24:	4935      	ldr	r1, [pc, #212]	; (8002bfc <HAL_GPIO_Init+0x328>)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b32:	4b3d      	ldr	r3, [pc, #244]	; (8002c28 <HAL_GPIO_Init+0x354>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b56:	4a34      	ldr	r2, [pc, #208]	; (8002c28 <HAL_GPIO_Init+0x354>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b5c:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <HAL_GPIO_Init+0x354>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b80:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <HAL_GPIO_Init+0x354>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b86:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <HAL_GPIO_Init+0x354>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <HAL_GPIO_Init+0x354>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_GPIO_Init+0x354>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <HAL_GPIO_Init+0x354>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b0f      	cmp	r3, #15
 8002be4:	f67f ae84 	bls.w	80028f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	40020c00 	.word	0x40020c00
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40021400 	.word	0x40021400
 8002c18:	40021800 	.word	0x40021800
 8002c1c:	40021c00 	.word	0x40021c00
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40022400 	.word	0x40022400
 8002c28:	40013c00 	.word	0x40013c00

08002c2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	e0d9      	b.n	8002dfc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	f040 80c9 	bne.w	8002df6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c64:	4a6b      	ldr	r2, [pc, #428]	; (8002e14 <HAL_GPIO_DeInit+0x1e8>)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c70:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a63      	ldr	r2, [pc, #396]	; (8002e18 <HAL_GPIO_DeInit+0x1ec>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d037      	beq.n	8002cfe <HAL_GPIO_DeInit+0xd2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a62      	ldr	r2, [pc, #392]	; (8002e1c <HAL_GPIO_DeInit+0x1f0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d031      	beq.n	8002cfa <HAL_GPIO_DeInit+0xce>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a61      	ldr	r2, [pc, #388]	; (8002e20 <HAL_GPIO_DeInit+0x1f4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02b      	beq.n	8002cf6 <HAL_GPIO_DeInit+0xca>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <HAL_GPIO_DeInit+0x1f8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_DeInit+0xc6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a5f      	ldr	r2, [pc, #380]	; (8002e28 <HAL_GPIO_DeInit+0x1fc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_DeInit+0xc2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a5e      	ldr	r2, [pc, #376]	; (8002e2c <HAL_GPIO_DeInit+0x200>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_DeInit+0xbe>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a5d      	ldr	r2, [pc, #372]	; (8002e30 <HAL_GPIO_DeInit+0x204>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_DeInit+0xba>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a5c      	ldr	r2, [pc, #368]	; (8002e34 <HAL_GPIO_DeInit+0x208>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_DeInit+0xb6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a5b      	ldr	r2, [pc, #364]	; (8002e38 <HAL_GPIO_DeInit+0x20c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_DeInit+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a5a      	ldr	r2, [pc, #360]	; (8002e3c <HAL_GPIO_DeInit+0x210>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_DeInit+0xae>
 8002cd6:	2309      	movs	r3, #9
 8002cd8:	e012      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002cda:	230a      	movs	r3, #10
 8002cdc:	e010      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	e00e      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	e00c      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	e00a      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002cea:	2305      	movs	r3, #5
 8002cec:	e008      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e006      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e004      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e002      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_GPIO_DeInit+0xd4>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	f002 0203 	and.w	r2, r2, #3
 8002d06:	0092      	lsls	r2, r2, #2
 8002d08:	4093      	lsls	r3, r2
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d132      	bne.n	8002d76 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002d10:	4b4b      	ldr	r3, [pc, #300]	; (8002e40 <HAL_GPIO_DeInit+0x214>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	4949      	ldr	r1, [pc, #292]	; (8002e40 <HAL_GPIO_DeInit+0x214>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002d1e:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <HAL_GPIO_DeInit+0x214>)
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	4946      	ldr	r1, [pc, #280]	; (8002e40 <HAL_GPIO_DeInit+0x214>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002d2c:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <HAL_GPIO_DeInit+0x214>)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	4942      	ldr	r1, [pc, #264]	; (8002e40 <HAL_GPIO_DeInit+0x214>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_GPIO_DeInit+0x214>)
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	493f      	ldr	r1, [pc, #252]	; (8002e40 <HAL_GPIO_DeInit+0x214>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002d58:	4a2e      	ldr	r2, [pc, #184]	; (8002e14 <HAL_GPIO_DeInit+0x1e8>)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	482a      	ldr	r0, [pc, #168]	; (8002e14 <HAL_GPIO_DeInit+0x1e8>)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	089b      	lsrs	r3, r3, #2
 8002d6e:	400a      	ands	r2, r1
 8002d70:	3302      	adds	r3, #2
 8002d72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2103      	movs	r1, #3
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	401a      	ands	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	220f      	movs	r2, #15
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	08d2      	lsrs	r2, r2, #3
 8002dac:	4019      	ands	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3208      	adds	r2, #8
 8002db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2103      	movs	r1, #3
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	401a      	ands	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	2103      	movs	r1, #3
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	401a      	ands	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b0f      	cmp	r3, #15
 8002e00:	f67f af22 	bls.w	8002c48 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40013800 	.word	0x40013800
 8002e18:	40020000 	.word	0x40020000
 8002e1c:	40020400 	.word	0x40020400
 8002e20:	40020800 	.word	0x40020800
 8002e24:	40020c00 	.word	0x40020c00
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40021400 	.word	0x40021400
 8002e30:	40021800 	.word	0x40021800
 8002e34:	40021c00 	.word	0x40021c00
 8002e38:	40022000 	.word	0x40022000
 8002e3c:	40022400 	.word	0x40022400
 8002e40:	40013c00 	.word	0x40013c00

08002e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e54:	787b      	ldrb	r3, [r7, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e60:	e003      	b.n	8002e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	041a      	lsls	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0bf      	b.n	800300a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff f95a 	bl	8002158 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002eba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6999      	ldr	r1, [r3, #24]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ed0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6899      	ldr	r1, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b4a      	ldr	r3, [pc, #296]	; (8003014 <HAL_LTDC_Init+0x19c>)
 8002eec:	400b      	ands	r3, r1
 8002eee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68d9      	ldr	r1, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <HAL_LTDC_Init+0x19c>)
 8002f1a:	400b      	ands	r3, r1
 8002f1c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	041b      	lsls	r3, r3, #16
 8002f24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68d9      	ldr	r1, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6919      	ldr	r1, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_LTDC_Init+0x19c>)
 8002f48:	400b      	ands	r3, r1
 8002f4a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	041b      	lsls	r3, r3, #16
 8002f52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6959      	ldr	r1, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b27      	ldr	r3, [pc, #156]	; (8003014 <HAL_LTDC_Init+0x19c>)
 8002f76:	400b      	ands	r3, r1
 8002f78:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0206 	orr.w	r2, r2, #6
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	f000f800 	.word	0xf000f800

08003018 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_LTDC_ConfigLayer+0x1a>
 800302e:	2302      	movs	r3, #2
 8003030:	e02c      	b.n	800308c <HAL_LTDC_ConfigLayer+0x74>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2134      	movs	r1, #52	; 0x34
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4614      	mov	r4, r2
 8003056:	461d      	mov	r5, r3
 8003058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800305a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800305c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800305e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f811 	bl	8003094 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2201      	movs	r2, #1
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bdb0      	pop	{r4, r5, r7, pc}

08003094 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	0c1b      	lsrs	r3, r3, #16
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	4413      	add	r3, r2
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	01db      	lsls	r3, r3, #7
 80030c0:	4413      	add	r3, r2
 80030c2:	3384      	adds	r3, #132	; 0x84
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	4611      	mov	r1, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	01d2      	lsls	r2, r2, #7
 80030d0:	440a      	add	r2, r1
 80030d2:	3284      	adds	r2, #132	; 0x84
 80030d4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80030d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80030ea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80030ec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	01db      	lsls	r3, r3, #7
 80030f8:	440b      	add	r3, r1
 80030fa:	3384      	adds	r3, #132	; 0x84
 80030fc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003102:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003112:	4413      	add	r3, r2
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	01db      	lsls	r3, r3, #7
 8003122:	4413      	add	r3, r2
 8003124:	3384      	adds	r3, #132	; 0x84
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	4611      	mov	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	01d2      	lsls	r2, r2, #7
 8003132:	440a      	add	r2, r1
 8003134:	3284      	adds	r2, #132	; 0x84
 8003136:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800313a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800314a:	4413      	add	r3, r2
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	01db      	lsls	r3, r3, #7
 8003158:	440b      	add	r3, r1
 800315a:	3384      	adds	r3, #132	; 0x84
 800315c:	4619      	mov	r1, r3
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	01db      	lsls	r3, r3, #7
 800316e:	4413      	add	r3, r2
 8003170:	3384      	adds	r3, #132	; 0x84
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	4611      	mov	r1, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	01d2      	lsls	r2, r2, #7
 800317e:	440a      	add	r2, r1
 8003180:	3284      	adds	r2, #132	; 0x84
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	01db      	lsls	r3, r3, #7
 8003192:	4413      	add	r3, r2
 8003194:	3384      	adds	r3, #132	; 0x84
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	061b      	lsls	r3, r3, #24
 80031b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	01db      	lsls	r3, r3, #7
 80031c4:	4413      	add	r3, r2
 80031c6:	3384      	adds	r3, #132	; 0x84
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	01db      	lsls	r3, r3, #7
 80031d4:	4413      	add	r3, r2
 80031d6:	3384      	adds	r3, #132	; 0x84
 80031d8:	461a      	mov	r2, r3
 80031da:	2300      	movs	r3, #0
 80031dc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031e4:	461a      	mov	r2, r3
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	431a      	orrs	r2, r3
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	01db      	lsls	r3, r3, #7
 80031f8:	440b      	add	r3, r1
 80031fa:	3384      	adds	r3, #132	; 0x84
 80031fc:	4619      	mov	r1, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	01db      	lsls	r3, r3, #7
 800320e:	4413      	add	r3, r2
 8003210:	3384      	adds	r3, #132	; 0x84
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	4611      	mov	r1, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	01d2      	lsls	r2, r2, #7
 800321e:	440a      	add	r2, r1
 8003220:	3284      	adds	r2, #132	; 0x84
 8003222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003226:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	01db      	lsls	r3, r3, #7
 8003232:	4413      	add	r3, r2
 8003234:	3384      	adds	r3, #132	; 0x84
 8003236:	461a      	mov	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	01db      	lsls	r3, r3, #7
 8003248:	4413      	add	r3, r2
 800324a:	3384      	adds	r3, #132	; 0x84
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	4611      	mov	r1, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	01d2      	lsls	r2, r2, #7
 8003258:	440a      	add	r2, r1
 800325a:	3284      	adds	r2, #132	; 0x84
 800325c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003260:	f023 0307 	bic.w	r3, r3, #7
 8003264:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	68f9      	ldr	r1, [r7, #12]
 8003270:	6809      	ldr	r1, [r1, #0]
 8003272:	4608      	mov	r0, r1
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	01c9      	lsls	r1, r1, #7
 8003278:	4401      	add	r1, r0
 800327a:	3184      	adds	r1, #132	; 0x84
 800327c:	4313      	orrs	r3, r2
 800327e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	01db      	lsls	r3, r3, #7
 800328a:	4413      	add	r3, r2
 800328c:	3384      	adds	r3, #132	; 0x84
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	01db      	lsls	r3, r3, #7
 800329a:	4413      	add	r3, r2
 800329c:	3384      	adds	r3, #132	; 0x84
 800329e:	461a      	mov	r2, r3
 80032a0:	2300      	movs	r3, #0
 80032a2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	01db      	lsls	r3, r3, #7
 80032ae:	4413      	add	r3, r2
 80032b0:	3384      	adds	r3, #132	; 0x84
 80032b2:	461a      	mov	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80032c2:	2304      	movs	r3, #4
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	e01b      	b.n	8003300 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80032d0:	2303      	movs	r3, #3
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e014      	b.n	8003300 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d00b      	beq.n	80032f6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d007      	beq.n	80032f6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d003      	beq.n	80032f6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032f2:	2b07      	cmp	r3, #7
 80032f4:	d102      	bne.n	80032fc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80032f6:	2302      	movs	r3, #2
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e001      	b.n	8003300 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80032fc:	2301      	movs	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	01db      	lsls	r3, r3, #7
 800330a:	4413      	add	r3, r2
 800330c:	3384      	adds	r3, #132	; 0x84
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	4611      	mov	r1, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	01d2      	lsls	r2, r2, #7
 800331a:	440a      	add	r2, r1
 800331c:	3284      	adds	r2, #132	; 0x84
 800331e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003322:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1acb      	subs	r3, r1, r3
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	6809      	ldr	r1, [r1, #0]
 8003346:	4608      	mov	r0, r1
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	01c9      	lsls	r1, r1, #7
 800334c:	4401      	add	r1, r0
 800334e:	3184      	adds	r1, #132	; 0x84
 8003350:	4313      	orrs	r3, r2
 8003352:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	01db      	lsls	r3, r3, #7
 800335e:	4413      	add	r3, r2
 8003360:	3384      	adds	r3, #132	; 0x84
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	4611      	mov	r1, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	01d2      	lsls	r2, r2, #7
 800336e:	440a      	add	r2, r1
 8003370:	3284      	adds	r2, #132	; 0x84
 8003372:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003376:	f023 0307 	bic.w	r3, r3, #7
 800337a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	01db      	lsls	r3, r3, #7
 8003386:	4413      	add	r3, r2
 8003388:	3384      	adds	r3, #132	; 0x84
 800338a:	461a      	mov	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	01db      	lsls	r3, r3, #7
 800339c:	4413      	add	r3, r2
 800339e:	3384      	adds	r3, #132	; 0x84
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	4611      	mov	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	01d2      	lsls	r2, r2, #7
 80033ac:	440a      	add	r2, r1
 80033ae:	3284      	adds	r2, #132	; 0x84
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6013      	str	r3, [r2, #0]
}
 80033b6:	bf00      	nop
 80033b8:	3724      	adds	r7, #36	; 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e267      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d075      	beq.n	80034ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033e2:	4b88      	ldr	r3, [pc, #544]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d00c      	beq.n	8003408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ee:	4b85      	ldr	r3, [pc, #532]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d112      	bne.n	8003420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b82      	ldr	r3, [pc, #520]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003406:	d10b      	bne.n	8003420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003408:	4b7e      	ldr	r3, [pc, #504]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05b      	beq.n	80034cc <HAL_RCC_OscConfig+0x108>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d157      	bne.n	80034cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e242      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003428:	d106      	bne.n	8003438 <HAL_RCC_OscConfig+0x74>
 800342a:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0xb0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0x98>
 8003442:	4b70      	ldr	r3, [pc, #448]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6f      	ldr	r2, [pc, #444]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b6d      	ldr	r3, [pc, #436]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6c      	ldr	r2, [pc, #432]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0xb0>
 800345c:	4b69      	ldr	r3, [pc, #420]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a68      	ldr	r2, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a65      	ldr	r2, [pc, #404]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7ff f8e8 	bl	8002650 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003484:	f7ff f8e4 	bl	8002650 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e207      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b5b      	ldr	r3, [pc, #364]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0xc0>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7ff f8d4 	bl	8002650 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ac:	f7ff f8d0 	bl	8002650 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1f3      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	4b51      	ldr	r3, [pc, #324]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0xe8>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d063      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034da:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b44      	ldr	r3, [pc, #272]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x152>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1c7      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4937      	ldr	r1, [pc, #220]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	e03a      	b.n	80035a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003534:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_RCC_OscConfig+0x244>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7ff f889 	bl	8002650 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003542:	f7ff f885 	bl	8002650 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1a8      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b28      	ldr	r3, [pc, #160]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4925      	ldr	r1, [pc, #148]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003576:	4b24      	ldr	r3, [pc, #144]	; (8003608 <HAL_RCC_OscConfig+0x244>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7ff f868 	bl	8002650 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003584:	f7ff f864 	bl	8002650 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e187      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d036      	beq.n	800361c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_RCC_OscConfig+0x248>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7ff f848 	bl	8002650 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c4:	f7ff f844 	bl	8002650 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e167      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x240>)
 80035d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x200>
 80035e2:	e01b      	b.n	800361c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_OscConfig+0x248>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7ff f831 	bl	8002650 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	e00e      	b.n	8003610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f2:	f7ff f82d 	bl	8002650 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d907      	bls.n	8003610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e150      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
 8003604:	40023800 	.word	0x40023800
 8003608:	42470000 	.word	0x42470000
 800360c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b88      	ldr	r3, [pc, #544]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ea      	bne.n	80035f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8097 	beq.w	8003758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362e:	4b81      	ldr	r3, [pc, #516]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4b7d      	ldr	r3, [pc, #500]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	4a7c      	ldr	r2, [pc, #496]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003648:	6413      	str	r3, [r2, #64]	; 0x40
 800364a:	4b7a      	ldr	r3, [pc, #488]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b77      	ldr	r3, [pc, #476]	; (8003838 <HAL_RCC_OscConfig+0x474>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d118      	bne.n	8003698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b74      	ldr	r3, [pc, #464]	; (8003838 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a73      	ldr	r2, [pc, #460]	; (8003838 <HAL_RCC_OscConfig+0x474>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7fe ffed 	bl	8002650 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367a:	f7fe ffe9 	bl	8002650 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e10c      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	4b6a      	ldr	r3, [pc, #424]	; (8003838 <HAL_RCC_OscConfig+0x474>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x2ea>
 80036a0:	4b64      	ldr	r3, [pc, #400]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a63      	ldr	r2, [pc, #396]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
 80036ac:	e01c      	b.n	80036e8 <HAL_RCC_OscConfig+0x324>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x30c>
 80036b6:	4b5f      	ldr	r3, [pc, #380]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a5e      	ldr	r2, [pc, #376]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
 80036c2:	4b5c      	ldr	r3, [pc, #368]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a5b      	ldr	r2, [pc, #364]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0x324>
 80036d0:	4b58      	ldr	r3, [pc, #352]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a57      	ldr	r2, [pc, #348]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	4b55      	ldr	r3, [pc, #340]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a54      	ldr	r2, [pc, #336]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0304 	bic.w	r3, r3, #4
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fe ffae 	bl	8002650 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fe ffaa 	bl	8002650 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0cb      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	4b49      	ldr	r3, [pc, #292]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ee      	beq.n	80036f8 <HAL_RCC_OscConfig+0x334>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371c:	f7fe ff98 	bl	8002650 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe ff94 	bl	8002650 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0b5      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373a:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ee      	bne.n	8003724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374c:	4b39      	ldr	r3, [pc, #228]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	4a38      	ldr	r2, [pc, #224]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003756:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80a1 	beq.w	80038a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003762:	4b34      	ldr	r3, [pc, #208]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b08      	cmp	r3, #8
 800376c:	d05c      	beq.n	8003828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d141      	bne.n	80037fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003776:	4b31      	ldr	r3, [pc, #196]	; (800383c <HAL_RCC_OscConfig+0x478>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fe ff68 	bl	8002650 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe ff64 	bl	8002650 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e087      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	019b      	lsls	r3, r3, #6
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	3b01      	subs	r3, #1
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	491b      	ldr	r1, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x478>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fe ff3d 	bl	8002650 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe ff39 	bl	8002650 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e05c      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x416>
 80037f8:	e054      	b.n	80038a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_RCC_OscConfig+0x478>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe ff26 	bl	8002650 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003808:	f7fe ff22 	bl	8002650 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e045      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_OscConfig+0x470>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x444>
 8003826:	e03d      	b.n	80038a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e038      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
 8003834:	40023800 	.word	0x40023800
 8003838:	40007000 	.word	0x40007000
 800383c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003840:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <HAL_RCC_OscConfig+0x4ec>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d028      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d121      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d11a      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003870:	4013      	ands	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003878:	4293      	cmp	r3, r2
 800387a:	d111      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800

080038b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0cc      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b68      	ldr	r3, [pc, #416]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d90c      	bls.n	80038f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b65      	ldr	r3, [pc, #404]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b63      	ldr	r3, [pc, #396]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0b8      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003908:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003920:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a52      	ldr	r2, [pc, #328]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800392a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800392c:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	494d      	ldr	r1, [pc, #308]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d044      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d119      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e07f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d003      	beq.n	8003972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	2b03      	cmp	r3, #3
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b3f      	ldr	r3, [pc, #252]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e067      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4934      	ldr	r1, [pc, #208]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fe fe54 	bl	8002650 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fe fe50 	bl	8002650 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e04f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d20c      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e032      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4916      	ldr	r1, [pc, #88]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	490e      	ldr	r1, [pc, #56]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a3a:	f000 f821 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	490a      	ldr	r1, [pc, #40]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	5ccb      	ldrb	r3, [r1, r3]
 8003a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_ClockConfig+0x1c8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fdb4 	bl	80025c8 <HAL_InitTick>

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023c00 	.word	0x40023c00
 8003a70:	40023800 	.word	0x40023800
 8003a74:	080063e8 	.word	0x080063e8
 8003a78:	20000010 	.word	0x20000010
 8003a7c:	20000014 	.word	0x20000014

08003a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a84:	b094      	sub	sp, #80	; 0x50
 8003a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a90:	2300      	movs	r3, #0
 8003a92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a98:	4b79      	ldr	r3, [pc, #484]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	f200 80e1 	bhi.w	8003c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x3a>
 8003ab2:	e0db      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b73      	ldr	r3, [pc, #460]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ab8:	e0db      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aba:	4b73      	ldr	r3, [pc, #460]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8003abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003abe:	e0d8      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac0:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aca:	4b6d      	ldr	r3, [pc, #436]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d063      	beq.n	8003b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	2200      	movs	r2, #0
 8003ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aea:	2300      	movs	r3, #0
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
 8003aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003af2:	4622      	mov	r2, r4
 8003af4:	462b      	mov	r3, r5
 8003af6:	f04f 0000 	mov.w	r0, #0
 8003afa:	f04f 0100 	mov.w	r1, #0
 8003afe:	0159      	lsls	r1, r3, #5
 8003b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b04:	0150      	lsls	r0, r2, #5
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	1a51      	subs	r1, r2, r1
 8003b0e:	6139      	str	r1, [r7, #16]
 8003b10:	4629      	mov	r1, r5
 8003b12:	eb63 0301 	sbc.w	r3, r3, r1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b24:	4659      	mov	r1, fp
 8003b26:	018b      	lsls	r3, r1, #6
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b2e:	4651      	mov	r1, sl
 8003b30:	018a      	lsls	r2, r1, #6
 8003b32:	4651      	mov	r1, sl
 8003b34:	ebb2 0801 	subs.w	r8, r2, r1
 8003b38:	4659      	mov	r1, fp
 8003b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b52:	4690      	mov	r8, r2
 8003b54:	4699      	mov	r9, r3
 8003b56:	4623      	mov	r3, r4
 8003b58:	eb18 0303 	adds.w	r3, r8, r3
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	462b      	mov	r3, r5
 8003b60:	eb49 0303 	adc.w	r3, r9, r3
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b72:	4629      	mov	r1, r5
 8003b74:	024b      	lsls	r3, r1, #9
 8003b76:	4621      	mov	r1, r4
 8003b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	024a      	lsls	r2, r1, #9
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b86:	2200      	movs	r2, #0
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b90:	f7fc fb34 	bl	80001fc <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4613      	mov	r3, r2
 8003b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b9c:	e058      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9e:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	099b      	lsrs	r3, r3, #6
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	4611      	mov	r1, r2
 8003baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bb8:	4642      	mov	r2, r8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	f04f 0000 	mov.w	r0, #0
 8003bc0:	f04f 0100 	mov.w	r1, #0
 8003bc4:	0159      	lsls	r1, r3, #5
 8003bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bca:	0150      	lsls	r0, r2, #5
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8003bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	00eb      	lsls	r3, r5, #3
 8003c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c06:	00e2      	lsls	r2, r4, #3
 8003c08:	4614      	mov	r4, r2
 8003c0a:	461d      	mov	r5, r3
 8003c0c:	4643      	mov	r3, r8
 8003c0e:	18e3      	adds	r3, r4, r3
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	464b      	mov	r3, r9
 8003c14:	eb45 0303 	adc.w	r3, r5, r3
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c26:	4629      	mov	r1, r5
 8003c28:	028b      	lsls	r3, r1, #10
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c30:	4621      	mov	r1, r4
 8003c32:	028a      	lsls	r2, r1, #10
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	61fa      	str	r2, [r7, #28]
 8003c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c44:	f7fc fada 	bl	80001fc <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c6a:	e002      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3750      	adds	r7, #80	; 0x50
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	007a1200 	.word	0x007a1200

08003c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d075      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cc0:	4b91      	ldr	r3, [pc, #580]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cc6:	f7fe fcc3 	bl	8002650 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cce:	f7fe fcbf 	bl	8002650 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e189      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ce0:	4b8a      	ldr	r3, [pc, #552]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	019a      	lsls	r2, r3, #6
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	071b      	lsls	r3, r3, #28
 8003d04:	4981      	ldr	r1, [pc, #516]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01f      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d18:	4b7c      	ldr	r3, [pc, #496]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1e:	0f1b      	lsrs	r3, r3, #28
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	019a      	lsls	r2, r3, #6
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	431a      	orrs	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	071b      	lsls	r3, r3, #28
 8003d38:	4974      	ldr	r1, [pc, #464]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d40:	4b72      	ldr	r3, [pc, #456]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d46:	f023 021f 	bic.w	r2, r3, #31
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	496e      	ldr	r1, [pc, #440]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00d      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	019a      	lsls	r2, r3, #6
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	071b      	lsls	r3, r3, #28
 8003d78:	4964      	ldr	r1, [pc, #400]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d80:	4b61      	ldr	r3, [pc, #388]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d86:	f7fe fc63 	bl	8002650 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d8e:	f7fe fc5f 	bl	8002650 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e129      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003da0:	4b5a      	ldr	r3, [pc, #360]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d079      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003dc4:	4b52      	ldr	r3, [pc, #328]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dca:	f7fe fc41 	bl	8002650 <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003dd2:	f7fe fc3d 	bl	8002650 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e107      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003de4:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df0:	d0ef      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d020      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dfe:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	0f1b      	lsrs	r3, r3, #28
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	019a      	lsls	r2, r3, #6
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	071b      	lsls	r3, r3, #28
 8003e1e:	493b      	ldr	r1, [pc, #236]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e26:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	4934      	ldr	r1, [pc, #208]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01e      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e4c:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	0e1b      	lsrs	r3, r3, #24
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	019a      	lsls	r2, r3, #6
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	071b      	lsls	r3, r3, #28
 8003e6c:	4927      	ldr	r1, [pc, #156]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	4922      	ldr	r1, [pc, #136]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e8a:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e90:	f7fe fbde 	bl	8002650 <HAL_GetTick>
 8003e94:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e98:	f7fe fbda 	bl	8002650 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0a4      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eaa:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb6:	d1ef      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 808b 	beq.w	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a0f      	ldr	r2, [pc, #60]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a0b      	ldr	r2, [pc, #44]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eee:	f7fe fbaf 	bl	8002650 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ef4:	e010      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fe fbab 	bl	8002650 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d909      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e075      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003f08:	42470068 	.word	0x42470068
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	42470070 	.word	0x42470070
 8003f14:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f18:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0e8      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f24:	4b36      	ldr	r3, [pc, #216]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02f      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d028      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f42:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4c:	4b2d      	ldr	r3, [pc, #180]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f52:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f5e:	4b28      	ldr	r3, [pc, #160]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d114      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f6a:	f7fe fb71 	bl	8002650 <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fe fb6d 	bl	8002650 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e035      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ee      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa0:	d10d      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003fa2:	4b17      	ldr	r3, [pc, #92]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb6:	4912      	ldr	r1, [pc, #72]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]
 8003fbc:	e005      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	4a0f      	ldr	r2, [pc, #60]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fc4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fc8:	6093      	str	r3, [r2, #8]
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd6:	490a      	ldr	r1, [pc, #40]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003ff0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40007000 	.word	0x40007000
 8004000:	40023800 	.word	0x40023800
 8004004:	42470e40 	.word	0x42470e40
 8004008:	424711e0 	.word	0x424711e0

0800400c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e01c      	b.n	8004058 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	795b      	ldrb	r3, [r3, #5]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d105      	bne.n	8004034 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fe f9ba 	bl	80023a8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0204 	orr.w	r2, r2, #4
 8004048:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	791b      	ldrb	r3, [r3, #4]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_RNG_GenerateRandomNumber+0x1a>
 8004076:	2302      	movs	r3, #2
 8004078:	e044      	b.n	8004104 <HAL_RNG_GenerateRandomNumber+0xa4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	795b      	ldrb	r3, [r3, #5]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d133      	bne.n	80040f2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004090:	f7fe fade 	bl	8002650 <HAL_GetTick>
 8004094:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004096:	e018      	b.n	80040ca <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004098:	f7fe fada 	bl	8002650 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d911      	bls.n	80040ca <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d00a      	beq.n	80040ca <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e01c      	b.n	8004104 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d1df      	bne.n	8004098 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	715a      	strb	r2, [r3, #5]
 80040f0:	e004      	b.n	80040fc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2204      	movs	r2, #4
 80040f6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	711a      	strb	r2, [r3, #4]

  return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07b      	b.n	8004216 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2b00      	cmp	r3, #0
 8004124:	d108      	bne.n	8004138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800412e:	d009      	beq.n	8004144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	61da      	str	r2, [r3, #28]
 8004136:	e005      	b.n	8004144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fe f944 	bl	80023ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800417a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	ea42 0103 	orr.w	r1, r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	f003 0104 	and.w	r1, r3, #4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f003 0210 	and.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004204:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e01a      	b.n	8004266 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004246:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7fe f917 	bl	800247c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b088      	sub	sp, #32
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_SPI_Transmit+0x22>
 800428c:	2302      	movs	r3, #2
 800428e:	e126      	b.n	80044de <HAL_SPI_Transmit+0x270>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004298:	f7fe f9da 	bl	8002650 <HAL_GetTick>
 800429c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d002      	beq.n	80042b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b2:	e10b      	b.n	80044cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_SPI_Transmit+0x52>
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c4:	e102      	b.n	80044cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	d10f      	bne.n	800432e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800432c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d007      	beq.n	800434c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004354:	d14b      	bne.n	80043ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_Transmit+0xf6>
 800435e:	8afb      	ldrh	r3, [r7, #22]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d13e      	bne.n	80043e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004388:	e02b      	b.n	80043e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d112      	bne.n	80043be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	881a      	ldrh	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	1c9a      	adds	r2, r3, #2
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80043bc:	e011      	b.n	80043e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043be:	f7fe f947 	bl	8002650 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d803      	bhi.n	80043d6 <HAL_SPI_Transmit+0x168>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d102      	bne.n	80043dc <HAL_SPI_Transmit+0x16e>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043e0:	e074      	b.n	80044cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ce      	bne.n	800438a <HAL_SPI_Transmit+0x11c>
 80043ec:	e04c      	b.n	8004488 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_SPI_Transmit+0x18e>
 80043f6:	8afb      	ldrh	r3, [r7, #22]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d140      	bne.n	800447e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004422:	e02c      	b.n	800447e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d113      	bne.n	800445a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	86da      	strh	r2, [r3, #54]	; 0x36
 8004458:	e011      	b.n	800447e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800445a:	f7fe f8f9 	bl	8002650 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d803      	bhi.n	8004472 <HAL_SPI_Transmit+0x204>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d102      	bne.n	8004478 <HAL_SPI_Transmit+0x20a>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800447c:	e026      	b.n	80044cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1cd      	bne.n	8004424 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	6839      	ldr	r1, [r7, #0]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f8c1 	bl	8004614 <SPI_EndRxTxTransaction>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e000      	b.n	80044cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80044ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044f4:	b2db      	uxtb	r3, r3
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	4613      	mov	r3, r2
 8004512:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004514:	f7fe f89c 	bl	8002650 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	4413      	add	r3, r2
 8004522:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004524:	f7fe f894 	bl	8002650 <HAL_GetTick>
 8004528:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800452a:	4b39      	ldr	r3, [pc, #228]	; (8004610 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	015b      	lsls	r3, r3, #5
 8004530:	0d1b      	lsrs	r3, r3, #20
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800453a:	e054      	b.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d050      	beq.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004544:	f7fe f884 	bl	8002650 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	429a      	cmp	r2, r3
 8004552:	d902      	bls.n	800455a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d13d      	bne.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004572:	d111      	bne.n	8004598 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457c:	d004      	beq.n	8004588 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004586:	d107      	bne.n	8004598 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004596:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d10f      	bne.n	80045c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e017      	b.n	8004606 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4013      	ands	r3, r2
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	bf0c      	ite	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	2300      	movne	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	429a      	cmp	r2, r3
 8004602:	d19b      	bne.n	800453c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000010 	.word	0x20000010

08004614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <SPI_EndRxTxTransaction+0x7c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <SPI_EndRxTxTransaction+0x80>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	0d5b      	lsrs	r3, r3, #21
 800462c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463e:	d112      	bne.n	8004666 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2200      	movs	r2, #0
 8004648:	2180      	movs	r1, #128	; 0x80
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff ff5a 	bl	8004504 <SPI_WaitFlagStateUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	f043 0220 	orr.w	r2, r3, #32
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00f      	b.n	8004686 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3b01      	subs	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d0f2      	beq.n	8004666 <SPI_EndRxTxTransaction+0x52>
 8004680:	e000      	b.n	8004684 <SPI_EndRxTxTransaction+0x70>
        break;
 8004682:	bf00      	nop
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000010 	.word	0x20000010
 8004694:	165e9f81 	.word	0x165e9f81

08004698 <findslot>:
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <findslot+0x2c>)
 800469a:	b510      	push	{r4, lr}
 800469c:	4604      	mov	r4, r0
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	b118      	cbz	r0, 80046aa <findslot+0x12>
 80046a2:	6a03      	ldr	r3, [r0, #32]
 80046a4:	b90b      	cbnz	r3, 80046aa <findslot+0x12>
 80046a6:	f000 fb45 	bl	8004d34 <__sinit>
 80046aa:	2c13      	cmp	r4, #19
 80046ac:	d807      	bhi.n	80046be <findslot+0x26>
 80046ae:	4806      	ldr	r0, [pc, #24]	; (80046c8 <findslot+0x30>)
 80046b0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80046b4:	3201      	adds	r2, #1
 80046b6:	d002      	beq.n	80046be <findslot+0x26>
 80046b8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	2000      	movs	r0, #0
 80046c0:	e7fc      	b.n	80046bc <findslot+0x24>
 80046c2:	bf00      	nop
 80046c4:	2000007c 	.word	0x2000007c
 80046c8:	20025a28 	.word	0x20025a28

080046cc <error>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	4604      	mov	r4, r0
 80046d0:	f000 fbf8 	bl	8004ec4 <__errno>
 80046d4:	2613      	movs	r6, #19
 80046d6:	4605      	mov	r5, r0
 80046d8:	2700      	movs	r7, #0
 80046da:	4630      	mov	r0, r6
 80046dc:	4639      	mov	r1, r7
 80046de:	beab      	bkpt	0x00ab
 80046e0:	4606      	mov	r6, r0
 80046e2:	602e      	str	r6, [r5, #0]
 80046e4:	4620      	mov	r0, r4
 80046e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046e8 <checkerror>:
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d101      	bne.n	80046f0 <checkerror+0x8>
 80046ec:	f7ff bfee 	b.w	80046cc <error>
 80046f0:	4770      	bx	lr

080046f2 <_swiread>:
 80046f2:	b530      	push	{r4, r5, lr}
 80046f4:	b085      	sub	sp, #20
 80046f6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80046fa:	9203      	str	r2, [sp, #12]
 80046fc:	2406      	movs	r4, #6
 80046fe:	ad01      	add	r5, sp, #4
 8004700:	4620      	mov	r0, r4
 8004702:	4629      	mov	r1, r5
 8004704:	beab      	bkpt	0x00ab
 8004706:	4604      	mov	r4, r0
 8004708:	4620      	mov	r0, r4
 800470a:	f7ff ffed 	bl	80046e8 <checkerror>
 800470e:	b005      	add	sp, #20
 8004710:	bd30      	pop	{r4, r5, pc}

08004712 <_read>:
 8004712:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004714:	4615      	mov	r5, r2
 8004716:	9101      	str	r1, [sp, #4]
 8004718:	f7ff ffbe 	bl	8004698 <findslot>
 800471c:	9901      	ldr	r1, [sp, #4]
 800471e:	4604      	mov	r4, r0
 8004720:	b938      	cbnz	r0, 8004732 <_read+0x20>
 8004722:	f000 fbcf 	bl	8004ec4 <__errno>
 8004726:	2309      	movs	r3, #9
 8004728:	6003      	str	r3, [r0, #0]
 800472a:	f04f 30ff 	mov.w	r0, #4294967295
 800472e:	b003      	add	sp, #12
 8004730:	bd30      	pop	{r4, r5, pc}
 8004732:	6800      	ldr	r0, [r0, #0]
 8004734:	462a      	mov	r2, r5
 8004736:	f7ff ffdc 	bl	80046f2 <_swiread>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	d0f7      	beq.n	800472e <_read+0x1c>
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	1a2a      	subs	r2, r5, r0
 8004742:	4413      	add	r3, r2
 8004744:	6063      	str	r3, [r4, #4]
 8004746:	4610      	mov	r0, r2
 8004748:	e7f1      	b.n	800472e <_read+0x1c>

0800474a <_swilseek>:
 800474a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800474c:	460c      	mov	r4, r1
 800474e:	4616      	mov	r6, r2
 8004750:	f7ff ffa2 	bl	8004698 <findslot>
 8004754:	4605      	mov	r5, r0
 8004756:	b940      	cbnz	r0, 800476a <_swilseek+0x20>
 8004758:	f000 fbb4 	bl	8004ec4 <__errno>
 800475c:	2309      	movs	r3, #9
 800475e:	6003      	str	r3, [r0, #0]
 8004760:	f04f 34ff 	mov.w	r4, #4294967295
 8004764:	4620      	mov	r0, r4
 8004766:	b003      	add	sp, #12
 8004768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800476a:	2e02      	cmp	r6, #2
 800476c:	d903      	bls.n	8004776 <_swilseek+0x2c>
 800476e:	f000 fba9 	bl	8004ec4 <__errno>
 8004772:	2316      	movs	r3, #22
 8004774:	e7f3      	b.n	800475e <_swilseek+0x14>
 8004776:	2e01      	cmp	r6, #1
 8004778:	d112      	bne.n	80047a0 <_swilseek+0x56>
 800477a:	6843      	ldr	r3, [r0, #4]
 800477c:	18e4      	adds	r4, r4, r3
 800477e:	d4f6      	bmi.n	800476e <_swilseek+0x24>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	260a      	movs	r6, #10
 8004784:	e9cd 3400 	strd	r3, r4, [sp]
 8004788:	466f      	mov	r7, sp
 800478a:	4630      	mov	r0, r6
 800478c:	4639      	mov	r1, r7
 800478e:	beab      	bkpt	0x00ab
 8004790:	4606      	mov	r6, r0
 8004792:	4630      	mov	r0, r6
 8004794:	f7ff ffa8 	bl	80046e8 <checkerror>
 8004798:	2800      	cmp	r0, #0
 800479a:	dbe1      	blt.n	8004760 <_swilseek+0x16>
 800479c:	606c      	str	r4, [r5, #4]
 800479e:	e7e1      	b.n	8004764 <_swilseek+0x1a>
 80047a0:	2e02      	cmp	r6, #2
 80047a2:	6803      	ldr	r3, [r0, #0]
 80047a4:	d1ec      	bne.n	8004780 <_swilseek+0x36>
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	260c      	movs	r6, #12
 80047aa:	466f      	mov	r7, sp
 80047ac:	4630      	mov	r0, r6
 80047ae:	4639      	mov	r1, r7
 80047b0:	beab      	bkpt	0x00ab
 80047b2:	4606      	mov	r6, r0
 80047b4:	4630      	mov	r0, r6
 80047b6:	f7ff ff97 	bl	80046e8 <checkerror>
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	d0d0      	beq.n	8004760 <_swilseek+0x16>
 80047be:	4404      	add	r4, r0
 80047c0:	e7de      	b.n	8004780 <_swilseek+0x36>

080047c2 <_lseek>:
 80047c2:	f7ff bfc2 	b.w	800474a <_swilseek>

080047c6 <_swiwrite>:
 80047c6:	b530      	push	{r4, r5, lr}
 80047c8:	b085      	sub	sp, #20
 80047ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80047ce:	9203      	str	r2, [sp, #12]
 80047d0:	2405      	movs	r4, #5
 80047d2:	ad01      	add	r5, sp, #4
 80047d4:	4620      	mov	r0, r4
 80047d6:	4629      	mov	r1, r5
 80047d8:	beab      	bkpt	0x00ab
 80047da:	4604      	mov	r4, r0
 80047dc:	4620      	mov	r0, r4
 80047de:	f7ff ff83 	bl	80046e8 <checkerror>
 80047e2:	b005      	add	sp, #20
 80047e4:	bd30      	pop	{r4, r5, pc}

080047e6 <_write>:
 80047e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047e8:	4615      	mov	r5, r2
 80047ea:	9101      	str	r1, [sp, #4]
 80047ec:	f7ff ff54 	bl	8004698 <findslot>
 80047f0:	9901      	ldr	r1, [sp, #4]
 80047f2:	4604      	mov	r4, r0
 80047f4:	b930      	cbnz	r0, 8004804 <_write+0x1e>
 80047f6:	f000 fb65 	bl	8004ec4 <__errno>
 80047fa:	2309      	movs	r3, #9
 80047fc:	6003      	str	r3, [r0, #0]
 80047fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004802:	e012      	b.n	800482a <_write+0x44>
 8004804:	6800      	ldr	r0, [r0, #0]
 8004806:	462a      	mov	r2, r5
 8004808:	f7ff ffdd 	bl	80047c6 <_swiwrite>
 800480c:	2800      	cmp	r0, #0
 800480e:	dbf6      	blt.n	80047fe <_write+0x18>
 8004810:	6862      	ldr	r2, [r4, #4]
 8004812:	1a2b      	subs	r3, r5, r0
 8004814:	441a      	add	r2, r3
 8004816:	42a8      	cmp	r0, r5
 8004818:	6062      	str	r2, [r4, #4]
 800481a:	d105      	bne.n	8004828 <_write+0x42>
 800481c:	2000      	movs	r0, #0
 800481e:	b003      	add	sp, #12
 8004820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004824:	f7ff bf52 	b.w	80046cc <error>
 8004828:	4618      	mov	r0, r3
 800482a:	b003      	add	sp, #12
 800482c:	bd30      	pop	{r4, r5, pc}

0800482e <_swiclose>:
 800482e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004830:	2402      	movs	r4, #2
 8004832:	9001      	str	r0, [sp, #4]
 8004834:	ad01      	add	r5, sp, #4
 8004836:	4620      	mov	r0, r4
 8004838:	4629      	mov	r1, r5
 800483a:	beab      	bkpt	0x00ab
 800483c:	4604      	mov	r4, r0
 800483e:	4620      	mov	r0, r4
 8004840:	f7ff ff52 	bl	80046e8 <checkerror>
 8004844:	b003      	add	sp, #12
 8004846:	bd30      	pop	{r4, r5, pc}

08004848 <_close>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4605      	mov	r5, r0
 800484c:	f7ff ff24 	bl	8004698 <findslot>
 8004850:	4604      	mov	r4, r0
 8004852:	b930      	cbnz	r0, 8004862 <_close+0x1a>
 8004854:	f000 fb36 	bl	8004ec4 <__errno>
 8004858:	2309      	movs	r3, #9
 800485a:	6003      	str	r3, [r0, #0]
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	bd38      	pop	{r3, r4, r5, pc}
 8004862:	3d01      	subs	r5, #1
 8004864:	2d01      	cmp	r5, #1
 8004866:	d809      	bhi.n	800487c <_close+0x34>
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <_close+0x48>)
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	429a      	cmp	r2, r3
 8004870:	d104      	bne.n	800487c <_close+0x34>
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
 8004876:	6003      	str	r3, [r0, #0]
 8004878:	2000      	movs	r0, #0
 800487a:	e7f1      	b.n	8004860 <_close+0x18>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	f7ff ffd6 	bl	800482e <_swiclose>
 8004882:	2800      	cmp	r0, #0
 8004884:	d1ec      	bne.n	8004860 <_close+0x18>
 8004886:	f04f 33ff 	mov.w	r3, #4294967295
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	e7e8      	b.n	8004860 <_close+0x18>
 800488e:	bf00      	nop
 8004890:	20025a28 	.word	0x20025a28

08004894 <_swistat>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	460c      	mov	r4, r1
 8004898:	f7ff fefe 	bl	8004698 <findslot>
 800489c:	4605      	mov	r5, r0
 800489e:	b930      	cbnz	r0, 80048ae <_swistat+0x1a>
 80048a0:	f000 fb10 	bl	8004ec4 <__errno>
 80048a4:	2309      	movs	r3, #9
 80048a6:	6003      	str	r3, [r0, #0]
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	bd70      	pop	{r4, r5, r6, pc}
 80048ae:	6863      	ldr	r3, [r4, #4]
 80048b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048b4:	6063      	str	r3, [r4, #4]
 80048b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ba:	64a3      	str	r3, [r4, #72]	; 0x48
 80048bc:	260c      	movs	r6, #12
 80048be:	4630      	mov	r0, r6
 80048c0:	4629      	mov	r1, r5
 80048c2:	beab      	bkpt	0x00ab
 80048c4:	4605      	mov	r5, r0
 80048c6:	4628      	mov	r0, r5
 80048c8:	f7ff ff0e 	bl	80046e8 <checkerror>
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	bf1c      	itt	ne
 80048d0:	6120      	strne	r0, [r4, #16]
 80048d2:	2000      	movne	r0, #0
 80048d4:	e7ea      	b.n	80048ac <_swistat+0x18>

080048d6 <_stat>:
 80048d6:	b538      	push	{r3, r4, r5, lr}
 80048d8:	460d      	mov	r5, r1
 80048da:	4604      	mov	r4, r0
 80048dc:	2258      	movs	r2, #88	; 0x58
 80048de:	2100      	movs	r1, #0
 80048e0:	4628      	mov	r0, r5
 80048e2:	f000 faa0 	bl	8004e26 <memset>
 80048e6:	4620      	mov	r0, r4
 80048e8:	2100      	movs	r1, #0
 80048ea:	f000 f811 	bl	8004910 <_swiopen>
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	4604      	mov	r4, r0
 80048f2:	d00b      	beq.n	800490c <_stat+0x36>
 80048f4:	686b      	ldr	r3, [r5, #4]
 80048f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048fa:	606b      	str	r3, [r5, #4]
 80048fc:	4629      	mov	r1, r5
 80048fe:	f7ff ffc9 	bl	8004894 <_swistat>
 8004902:	4605      	mov	r5, r0
 8004904:	4620      	mov	r0, r4
 8004906:	f7ff ff9f 	bl	8004848 <_close>
 800490a:	462c      	mov	r4, r5
 800490c:	4620      	mov	r0, r4
 800490e:	bd38      	pop	{r3, r4, r5, pc}

08004910 <_swiopen>:
 8004910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004914:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80049c0 <_swiopen+0xb0>
 8004918:	b097      	sub	sp, #92	; 0x5c
 800491a:	4607      	mov	r7, r0
 800491c:	460e      	mov	r6, r1
 800491e:	2500      	movs	r5, #0
 8004920:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8004924:	1c61      	adds	r1, r4, #1
 8004926:	d037      	beq.n	8004998 <_swiopen+0x88>
 8004928:	3501      	adds	r5, #1
 800492a:	2d14      	cmp	r5, #20
 800492c:	d1f8      	bne.n	8004920 <_swiopen+0x10>
 800492e:	f000 fac9 	bl	8004ec4 <__errno>
 8004932:	2318      	movs	r3, #24
 8004934:	6003      	str	r3, [r0, #0]
 8004936:	f04f 34ff 	mov.w	r4, #4294967295
 800493a:	e03d      	b.n	80049b8 <_swiopen+0xa8>
 800493c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8004940:	f240 6301 	movw	r3, #1537	; 0x601
 8004944:	07b2      	lsls	r2, r6, #30
 8004946:	bf48      	it	mi
 8004948:	f044 0402 	orrmi.w	r4, r4, #2
 800494c:	421e      	tst	r6, r3
 800494e:	bf18      	it	ne
 8004950:	f044 0404 	orrne.w	r4, r4, #4
 8004954:	0733      	lsls	r3, r6, #28
 8004956:	bf48      	it	mi
 8004958:	f024 0404 	bicmi.w	r4, r4, #4
 800495c:	4638      	mov	r0, r7
 800495e:	bf48      	it	mi
 8004960:	f044 0408 	orrmi.w	r4, r4, #8
 8004964:	9700      	str	r7, [sp, #0]
 8004966:	f7fb fc41 	bl	80001ec <strlen>
 800496a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800496e:	2401      	movs	r4, #1
 8004970:	4620      	mov	r0, r4
 8004972:	4649      	mov	r1, r9
 8004974:	beab      	bkpt	0x00ab
 8004976:	4604      	mov	r4, r0
 8004978:	2c00      	cmp	r4, #0
 800497a:	db08      	blt.n	800498e <_swiopen+0x7e>
 800497c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8004980:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8004984:	2300      	movs	r3, #0
 8004986:	f8c8 3004 	str.w	r3, [r8, #4]
 800498a:	462c      	mov	r4, r5
 800498c:	e014      	b.n	80049b8 <_swiopen+0xa8>
 800498e:	4620      	mov	r0, r4
 8004990:	f7ff fe9c 	bl	80046cc <error>
 8004994:	4604      	mov	r4, r0
 8004996:	e00f      	b.n	80049b8 <_swiopen+0xa8>
 8004998:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800499c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80049a0:	46e9      	mov	r9, sp
 80049a2:	d1cb      	bne.n	800493c <_swiopen+0x2c>
 80049a4:	4649      	mov	r1, r9
 80049a6:	4638      	mov	r0, r7
 80049a8:	f7ff ff95 	bl	80048d6 <_stat>
 80049ac:	3001      	adds	r0, #1
 80049ae:	d0c5      	beq.n	800493c <_swiopen+0x2c>
 80049b0:	f000 fa88 	bl	8004ec4 <__errno>
 80049b4:	2311      	movs	r3, #17
 80049b6:	6003      	str	r3, [r0, #0]
 80049b8:	4620      	mov	r0, r4
 80049ba:	b017      	add	sp, #92	; 0x5c
 80049bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049c0:	20025a28 	.word	0x20025a28

080049c4 <_get_semihosting_exts>:
 80049c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80049c8:	4606      	mov	r6, r0
 80049ca:	460f      	mov	r7, r1
 80049cc:	482a      	ldr	r0, [pc, #168]	; (8004a78 <_get_semihosting_exts+0xb4>)
 80049ce:	2100      	movs	r1, #0
 80049d0:	4615      	mov	r5, r2
 80049d2:	f7ff ff9d 	bl	8004910 <_swiopen>
 80049d6:	462a      	mov	r2, r5
 80049d8:	4604      	mov	r4, r0
 80049da:	2100      	movs	r1, #0
 80049dc:	4630      	mov	r0, r6
 80049de:	f000 fa22 	bl	8004e26 <memset>
 80049e2:	1c63      	adds	r3, r4, #1
 80049e4:	d016      	beq.n	8004a14 <_get_semihosting_exts+0x50>
 80049e6:	4620      	mov	r0, r4
 80049e8:	f7ff fe56 	bl	8004698 <findslot>
 80049ec:	f04f 080c 	mov.w	r8, #12
 80049f0:	4681      	mov	r9, r0
 80049f2:	4640      	mov	r0, r8
 80049f4:	4649      	mov	r1, r9
 80049f6:	beab      	bkpt	0x00ab
 80049f8:	4680      	mov	r8, r0
 80049fa:	4640      	mov	r0, r8
 80049fc:	f7ff fe74 	bl	80046e8 <checkerror>
 8004a00:	2803      	cmp	r0, #3
 8004a02:	dd02      	ble.n	8004a0a <_get_semihosting_exts+0x46>
 8004a04:	1ec3      	subs	r3, r0, #3
 8004a06:	42ab      	cmp	r3, r5
 8004a08:	dc08      	bgt.n	8004a1c <_get_semihosting_exts+0x58>
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff ff1c 	bl	8004848 <_close>
 8004a10:	f04f 34ff 	mov.w	r4, #4294967295
 8004a14:	4620      	mov	r0, r4
 8004a16:	b003      	add	sp, #12
 8004a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	eb0d 0102 	add.w	r1, sp, r2
 8004a22:	4620      	mov	r0, r4
 8004a24:	f7ff fe75 	bl	8004712 <_read>
 8004a28:	2803      	cmp	r0, #3
 8004a2a:	ddee      	ble.n	8004a0a <_get_semihosting_exts+0x46>
 8004a2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a30:	2b53      	cmp	r3, #83	; 0x53
 8004a32:	d1ea      	bne.n	8004a0a <_get_semihosting_exts+0x46>
 8004a34:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004a38:	2b48      	cmp	r3, #72	; 0x48
 8004a3a:	d1e6      	bne.n	8004a0a <_get_semihosting_exts+0x46>
 8004a3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004a40:	2b46      	cmp	r3, #70	; 0x46
 8004a42:	d1e2      	bne.n	8004a0a <_get_semihosting_exts+0x46>
 8004a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a48:	2b42      	cmp	r3, #66	; 0x42
 8004a4a:	d1de      	bne.n	8004a0a <_get_semihosting_exts+0x46>
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4639      	mov	r1, r7
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff fe7a 	bl	800474a <_swilseek>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	dbd7      	blt.n	8004a0a <_get_semihosting_exts+0x46>
 8004a5a:	462a      	mov	r2, r5
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f7ff fe57 	bl	8004712 <_read>
 8004a64:	4605      	mov	r5, r0
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7ff feee 	bl	8004848 <_close>
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f7ff fe3b 	bl	80046e8 <checkerror>
 8004a72:	4604      	mov	r4, r0
 8004a74:	e7ce      	b.n	8004a14 <_get_semihosting_exts+0x50>
 8004a76:	bf00      	nop
 8004a78:	080063f8 	.word	0x080063f8

08004a7c <initialise_semihosting_exts>:
 8004a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a7e:	4d0a      	ldr	r5, [pc, #40]	; (8004aa8 <initialise_semihosting_exts+0x2c>)
 8004a80:	4c0a      	ldr	r4, [pc, #40]	; (8004aac <initialise_semihosting_exts+0x30>)
 8004a82:	2100      	movs	r1, #0
 8004a84:	2201      	movs	r2, #1
 8004a86:	a801      	add	r0, sp, #4
 8004a88:	6029      	str	r1, [r5, #0]
 8004a8a:	6022      	str	r2, [r4, #0]
 8004a8c:	f7ff ff9a 	bl	80049c4 <_get_semihosting_exts>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	dd07      	ble.n	8004aa4 <initialise_semihosting_exts+0x28>
 8004a94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a98:	f003 0201 	and.w	r2, r3, #1
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	602a      	str	r2, [r5, #0]
 8004aa2:	6023      	str	r3, [r4, #0]
 8004aa4:	b003      	add	sp, #12
 8004aa6:	bd30      	pop	{r4, r5, pc}
 8004aa8:	2000001c 	.word	0x2000001c
 8004aac:	20000020 	.word	0x20000020

08004ab0 <_has_ext_stdout_stderr>:
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	4c04      	ldr	r4, [pc, #16]	; (8004ac4 <_has_ext_stdout_stderr+0x14>)
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da01      	bge.n	8004abe <_has_ext_stdout_stderr+0xe>
 8004aba:	f7ff ffdf 	bl	8004a7c <initialise_semihosting_exts>
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000020 	.word	0x20000020

08004ac8 <initialise_monitor_handles>:
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	b085      	sub	sp, #20
 8004ace:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004b80 <initialise_monitor_handles+0xb8>
 8004ad2:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	2400      	movs	r4, #0
 8004ada:	9303      	str	r3, [sp, #12]
 8004adc:	af01      	add	r7, sp, #4
 8004ade:	9402      	str	r4, [sp, #8]
 8004ae0:	2501      	movs	r5, #1
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	4639      	mov	r1, r7
 8004ae6:	beab      	bkpt	0x00ab
 8004ae8:	4605      	mov	r5, r0
 8004aea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004b84 <initialise_monitor_handles+0xbc>
 8004aee:	4623      	mov	r3, r4
 8004af0:	4c20      	ldr	r4, [pc, #128]	; (8004b74 <initialise_monitor_handles+0xac>)
 8004af2:	f8c8 5000 	str.w	r5, [r8]
 8004af6:	f04f 32ff 	mov.w	r2, #4294967295
 8004afa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004afe:	3301      	adds	r3, #1
 8004b00:	2b14      	cmp	r3, #20
 8004b02:	d1fa      	bne.n	8004afa <initialise_monitor_handles+0x32>
 8004b04:	f7ff ffd4 	bl	8004ab0 <_has_ext_stdout_stderr>
 8004b08:	4d1b      	ldr	r5, [pc, #108]	; (8004b78 <initialise_monitor_handles+0xb0>)
 8004b0a:	b1d0      	cbz	r0, 8004b42 <initialise_monitor_handles+0x7a>
 8004b0c:	f04f 0a03 	mov.w	sl, #3
 8004b10:	2304      	movs	r3, #4
 8004b12:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b16:	2601      	movs	r6, #1
 8004b18:	f8cd a00c 	str.w	sl, [sp, #12]
 8004b1c:	9302      	str	r3, [sp, #8]
 8004b1e:	4630      	mov	r0, r6
 8004b20:	4639      	mov	r1, r7
 8004b22:	beab      	bkpt	0x00ab
 8004b24:	4683      	mov	fp, r0
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <initialise_monitor_handles+0xb4>)
 8004b28:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b2c:	f8c3 b000 	str.w	fp, [r3]
 8004b30:	2308      	movs	r3, #8
 8004b32:	f8cd a00c 	str.w	sl, [sp, #12]
 8004b36:	9302      	str	r3, [sp, #8]
 8004b38:	4630      	mov	r0, r6
 8004b3a:	4639      	mov	r1, r7
 8004b3c:	beab      	bkpt	0x00ab
 8004b3e:	4606      	mov	r6, r0
 8004b40:	602e      	str	r6, [r5, #0]
 8004b42:	682b      	ldr	r3, [r5, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	bf02      	ittt	eq
 8004b48:	4b0c      	ldreq	r3, [pc, #48]	; (8004b7c <initialise_monitor_handles+0xb4>)
 8004b4a:	681b      	ldreq	r3, [r3, #0]
 8004b4c:	602b      	streq	r3, [r5, #0]
 8004b4e:	2600      	movs	r6, #0
 8004b50:	f8d8 3000 	ldr.w	r3, [r8]
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	6066      	str	r6, [r4, #4]
 8004b58:	f7ff ffaa 	bl	8004ab0 <_has_ext_stdout_stderr>
 8004b5c:	b130      	cbz	r0, 8004b6c <initialise_monitor_handles+0xa4>
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <initialise_monitor_handles+0xb4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004b6c:	b005      	add	sp, #20
 8004b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b72:	bf00      	nop
 8004b74:	20025a28 	.word	0x20025a28
 8004b78:	20025a1c 	.word	0x20025a1c
 8004b7c:	20025a24 	.word	0x20025a24
 8004b80:	0800640e 	.word	0x0800640e
 8004b84:	20025a20 	.word	0x20025a20

08004b88 <__itoa>:
 8004b88:	1e93      	subs	r3, r2, #2
 8004b8a:	2b22      	cmp	r3, #34	; 0x22
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	460c      	mov	r4, r1
 8004b90:	d904      	bls.n	8004b9c <__itoa+0x14>
 8004b92:	2300      	movs	r3, #0
 8004b94:	700b      	strb	r3, [r1, #0]
 8004b96:	461c      	mov	r4, r3
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bd10      	pop	{r4, pc}
 8004b9c:	2a0a      	cmp	r2, #10
 8004b9e:	d109      	bne.n	8004bb4 <__itoa+0x2c>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	da07      	bge.n	8004bb4 <__itoa+0x2c>
 8004ba4:	232d      	movs	r3, #45	; 0x2d
 8004ba6:	700b      	strb	r3, [r1, #0]
 8004ba8:	4240      	negs	r0, r0
 8004baa:	2101      	movs	r1, #1
 8004bac:	4421      	add	r1, r4
 8004bae:	f000 f805 	bl	8004bbc <__utoa>
 8004bb2:	e7f1      	b.n	8004b98 <__itoa+0x10>
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	e7f9      	b.n	8004bac <__itoa+0x24>

08004bb8 <itoa>:
 8004bb8:	f7ff bfe6 	b.w	8004b88 <__itoa>

08004bbc <__utoa>:
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	4c1f      	ldr	r4, [pc, #124]	; (8004c3c <__utoa+0x80>)
 8004bc0:	b08b      	sub	sp, #44	; 0x2c
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	466e      	mov	r6, sp
 8004bc8:	f104 0c20 	add.w	ip, r4, #32
 8004bcc:	6820      	ldr	r0, [r4, #0]
 8004bce:	6861      	ldr	r1, [r4, #4]
 8004bd0:	4637      	mov	r7, r6
 8004bd2:	c703      	stmia	r7!, {r0, r1}
 8004bd4:	3408      	adds	r4, #8
 8004bd6:	4564      	cmp	r4, ip
 8004bd8:	463e      	mov	r6, r7
 8004bda:	d1f7      	bne.n	8004bcc <__utoa+0x10>
 8004bdc:	7921      	ldrb	r1, [r4, #4]
 8004bde:	7139      	strb	r1, [r7, #4]
 8004be0:	1e91      	subs	r1, r2, #2
 8004be2:	6820      	ldr	r0, [r4, #0]
 8004be4:	6038      	str	r0, [r7, #0]
 8004be6:	2922      	cmp	r1, #34	; 0x22
 8004be8:	f04f 0100 	mov.w	r1, #0
 8004bec:	d904      	bls.n	8004bf8 <__utoa+0x3c>
 8004bee:	7019      	strb	r1, [r3, #0]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	b00b      	add	sp, #44	; 0x2c
 8004bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf8:	1e58      	subs	r0, r3, #1
 8004bfa:	4684      	mov	ip, r0
 8004bfc:	fbb5 f7f2 	udiv	r7, r5, r2
 8004c00:	fb02 5617 	mls	r6, r2, r7, r5
 8004c04:	3628      	adds	r6, #40	; 0x28
 8004c06:	446e      	add	r6, sp
 8004c08:	460c      	mov	r4, r1
 8004c0a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004c0e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004c12:	462e      	mov	r6, r5
 8004c14:	42b2      	cmp	r2, r6
 8004c16:	f101 0101 	add.w	r1, r1, #1
 8004c1a:	463d      	mov	r5, r7
 8004c1c:	d9ee      	bls.n	8004bfc <__utoa+0x40>
 8004c1e:	2200      	movs	r2, #0
 8004c20:	545a      	strb	r2, [r3, r1]
 8004c22:	1919      	adds	r1, r3, r4
 8004c24:	1aa5      	subs	r5, r4, r2
 8004c26:	42aa      	cmp	r2, r5
 8004c28:	dae3      	bge.n	8004bf2 <__utoa+0x36>
 8004c2a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004c2e:	780e      	ldrb	r6, [r1, #0]
 8004c30:	7006      	strb	r6, [r0, #0]
 8004c32:	3201      	adds	r2, #1
 8004c34:	f801 5901 	strb.w	r5, [r1], #-1
 8004c38:	e7f4      	b.n	8004c24 <__utoa+0x68>
 8004c3a:	bf00      	nop
 8004c3c:	08006412 	.word	0x08006412

08004c40 <std>:
 8004c40:	2300      	movs	r3, #0
 8004c42:	b510      	push	{r4, lr}
 8004c44:	4604      	mov	r4, r0
 8004c46:	e9c0 3300 	strd	r3, r3, [r0]
 8004c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c4e:	6083      	str	r3, [r0, #8]
 8004c50:	8181      	strh	r1, [r0, #12]
 8004c52:	6643      	str	r3, [r0, #100]	; 0x64
 8004c54:	81c2      	strh	r2, [r0, #14]
 8004c56:	6183      	str	r3, [r0, #24]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	305c      	adds	r0, #92	; 0x5c
 8004c5e:	f000 f8e2 	bl	8004e26 <memset>
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <std+0x38>)
 8004c64:	6263      	str	r3, [r4, #36]	; 0x24
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <std+0x3c>)
 8004c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <std+0x40>)
 8004c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <std+0x44>)
 8004c70:	6224      	str	r4, [r4, #32]
 8004c72:	6323      	str	r3, [r4, #48]	; 0x30
 8004c74:	bd10      	pop	{r4, pc}
 8004c76:	bf00      	nop
 8004c78:	08004da1 	.word	0x08004da1
 8004c7c:	08004dc3 	.word	0x08004dc3
 8004c80:	08004dfb 	.word	0x08004dfb
 8004c84:	08004e1f 	.word	0x08004e1f

08004c88 <stdio_exit_handler>:
 8004c88:	4a02      	ldr	r2, [pc, #8]	; (8004c94 <stdio_exit_handler+0xc>)
 8004c8a:	4903      	ldr	r1, [pc, #12]	; (8004c98 <stdio_exit_handler+0x10>)
 8004c8c:	4803      	ldr	r0, [pc, #12]	; (8004c9c <stdio_exit_handler+0x14>)
 8004c8e:	f000 b869 	b.w	8004d64 <_fwalk_sglue>
 8004c92:	bf00      	nop
 8004c94:	20000024 	.word	0x20000024
 8004c98:	080050d9 	.word	0x080050d9
 8004c9c:	20000030 	.word	0x20000030

08004ca0 <cleanup_stdio>:
 8004ca0:	6841      	ldr	r1, [r0, #4]
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <cleanup_stdio+0x34>)
 8004ca4:	4299      	cmp	r1, r3
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	4604      	mov	r4, r0
 8004caa:	d001      	beq.n	8004cb0 <cleanup_stdio+0x10>
 8004cac:	f000 fa14 	bl	80050d8 <_fflush_r>
 8004cb0:	68a1      	ldr	r1, [r4, #8]
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <cleanup_stdio+0x38>)
 8004cb4:	4299      	cmp	r1, r3
 8004cb6:	d002      	beq.n	8004cbe <cleanup_stdio+0x1e>
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f000 fa0d 	bl	80050d8 <_fflush_r>
 8004cbe:	68e1      	ldr	r1, [r4, #12]
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <cleanup_stdio+0x3c>)
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	d004      	beq.n	8004cd0 <cleanup_stdio+0x30>
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ccc:	f000 ba04 	b.w	80050d8 <_fflush_r>
 8004cd0:	bd10      	pop	{r4, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20025ac8 	.word	0x20025ac8
 8004cd8:	20025b30 	.word	0x20025b30
 8004cdc:	20025b98 	.word	0x20025b98

08004ce0 <global_stdio_init.part.0>:
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <global_stdio_init.part.0+0x30>)
 8004ce4:	4c0b      	ldr	r4, [pc, #44]	; (8004d14 <global_stdio_init.part.0+0x34>)
 8004ce6:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <global_stdio_init.part.0+0x38>)
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	4620      	mov	r0, r4
 8004cec:	2200      	movs	r2, #0
 8004cee:	2104      	movs	r1, #4
 8004cf0:	f7ff ffa6 	bl	8004c40 <std>
 8004cf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	2109      	movs	r1, #9
 8004cfc:	f7ff ffa0 	bl	8004c40 <std>
 8004d00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d04:	2202      	movs	r2, #2
 8004d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d0a:	2112      	movs	r1, #18
 8004d0c:	f7ff bf98 	b.w	8004c40 <std>
 8004d10:	20025c00 	.word	0x20025c00
 8004d14:	20025ac8 	.word	0x20025ac8
 8004d18:	08004c89 	.word	0x08004c89

08004d1c <__sfp_lock_acquire>:
 8004d1c:	4801      	ldr	r0, [pc, #4]	; (8004d24 <__sfp_lock_acquire+0x8>)
 8004d1e:	f000 b8fb 	b.w	8004f18 <__retarget_lock_acquire_recursive>
 8004d22:	bf00      	nop
 8004d24:	20025c09 	.word	0x20025c09

08004d28 <__sfp_lock_release>:
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <__sfp_lock_release+0x8>)
 8004d2a:	f000 b8f6 	b.w	8004f1a <__retarget_lock_release_recursive>
 8004d2e:	bf00      	nop
 8004d30:	20025c09 	.word	0x20025c09

08004d34 <__sinit>:
 8004d34:	b510      	push	{r4, lr}
 8004d36:	4604      	mov	r4, r0
 8004d38:	f7ff fff0 	bl	8004d1c <__sfp_lock_acquire>
 8004d3c:	6a23      	ldr	r3, [r4, #32]
 8004d3e:	b11b      	cbz	r3, 8004d48 <__sinit+0x14>
 8004d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d44:	f7ff bff0 	b.w	8004d28 <__sfp_lock_release>
 8004d48:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <__sinit+0x28>)
 8004d4a:	6223      	str	r3, [r4, #32]
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <__sinit+0x2c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f5      	bne.n	8004d40 <__sinit+0xc>
 8004d54:	f7ff ffc4 	bl	8004ce0 <global_stdio_init.part.0>
 8004d58:	e7f2      	b.n	8004d40 <__sinit+0xc>
 8004d5a:	bf00      	nop
 8004d5c:	08004ca1 	.word	0x08004ca1
 8004d60:	20025c00 	.word	0x20025c00

08004d64 <_fwalk_sglue>:
 8004d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d68:	4607      	mov	r7, r0
 8004d6a:	4688      	mov	r8, r1
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	2600      	movs	r6, #0
 8004d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d74:	f1b9 0901 	subs.w	r9, r9, #1
 8004d78:	d505      	bpl.n	8004d86 <_fwalk_sglue+0x22>
 8004d7a:	6824      	ldr	r4, [r4, #0]
 8004d7c:	2c00      	cmp	r4, #0
 8004d7e:	d1f7      	bne.n	8004d70 <_fwalk_sglue+0xc>
 8004d80:	4630      	mov	r0, r6
 8004d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d86:	89ab      	ldrh	r3, [r5, #12]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d907      	bls.n	8004d9c <_fwalk_sglue+0x38>
 8004d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d90:	3301      	adds	r3, #1
 8004d92:	d003      	beq.n	8004d9c <_fwalk_sglue+0x38>
 8004d94:	4629      	mov	r1, r5
 8004d96:	4638      	mov	r0, r7
 8004d98:	47c0      	blx	r8
 8004d9a:	4306      	orrs	r6, r0
 8004d9c:	3568      	adds	r5, #104	; 0x68
 8004d9e:	e7e9      	b.n	8004d74 <_fwalk_sglue+0x10>

08004da0 <__sread>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	460c      	mov	r4, r1
 8004da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da8:	f000 f868 	bl	8004e7c <_read_r>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	bfab      	itete	ge
 8004db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004db2:	89a3      	ldrhlt	r3, [r4, #12]
 8004db4:	181b      	addge	r3, r3, r0
 8004db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dba:	bfac      	ite	ge
 8004dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dbe:	81a3      	strhlt	r3, [r4, #12]
 8004dc0:	bd10      	pop	{r4, pc}

08004dc2 <__swrite>:
 8004dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc6:	461f      	mov	r7, r3
 8004dc8:	898b      	ldrh	r3, [r1, #12]
 8004dca:	05db      	lsls	r3, r3, #23
 8004dcc:	4605      	mov	r5, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4616      	mov	r6, r2
 8004dd2:	d505      	bpl.n	8004de0 <__swrite+0x1e>
 8004dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd8:	2302      	movs	r3, #2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f000 f83c 	bl	8004e58 <_lseek_r>
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dea:	81a3      	strh	r3, [r4, #12]
 8004dec:	4632      	mov	r2, r6
 8004dee:	463b      	mov	r3, r7
 8004df0:	4628      	mov	r0, r5
 8004df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004df6:	f000 b853 	b.w	8004ea0 <_write_r>

08004dfa <__sseek>:
 8004dfa:	b510      	push	{r4, lr}
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e02:	f000 f829 	bl	8004e58 <_lseek_r>
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	bf15      	itete	ne
 8004e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e16:	81a3      	strheq	r3, [r4, #12]
 8004e18:	bf18      	it	ne
 8004e1a:	81a3      	strhne	r3, [r4, #12]
 8004e1c:	bd10      	pop	{r4, pc}

08004e1e <__sclose>:
 8004e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e22:	f000 b809 	b.w	8004e38 <_close_r>

08004e26 <memset>:
 8004e26:	4402      	add	r2, r0
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d100      	bne.n	8004e30 <memset+0xa>
 8004e2e:	4770      	bx	lr
 8004e30:	f803 1b01 	strb.w	r1, [r3], #1
 8004e34:	e7f9      	b.n	8004e2a <memset+0x4>
	...

08004e38 <_close_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4d06      	ldr	r5, [pc, #24]	; (8004e54 <_close_r+0x1c>)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4608      	mov	r0, r1
 8004e42:	602b      	str	r3, [r5, #0]
 8004e44:	f7ff fd00 	bl	8004848 <_close>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	d102      	bne.n	8004e52 <_close_r+0x1a>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	b103      	cbz	r3, 8004e52 <_close_r+0x1a>
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	bd38      	pop	{r3, r4, r5, pc}
 8004e54:	20025c04 	.word	0x20025c04

08004e58 <_lseek_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d07      	ldr	r5, [pc, #28]	; (8004e78 <_lseek_r+0x20>)
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	4608      	mov	r0, r1
 8004e60:	4611      	mov	r1, r2
 8004e62:	2200      	movs	r2, #0
 8004e64:	602a      	str	r2, [r5, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f7ff fcab 	bl	80047c2 <_lseek>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d102      	bne.n	8004e76 <_lseek_r+0x1e>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	b103      	cbz	r3, 8004e76 <_lseek_r+0x1e>
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	20025c04 	.word	0x20025c04

08004e7c <_read_r>:
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	4d07      	ldr	r5, [pc, #28]	; (8004e9c <_read_r+0x20>)
 8004e80:	4604      	mov	r4, r0
 8004e82:	4608      	mov	r0, r1
 8004e84:	4611      	mov	r1, r2
 8004e86:	2200      	movs	r2, #0
 8004e88:	602a      	str	r2, [r5, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f7ff fc41 	bl	8004712 <_read>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_read_r+0x1e>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_read_r+0x1e>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	20025c04 	.word	0x20025c04

08004ea0 <_write_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4d07      	ldr	r5, [pc, #28]	; (8004ec0 <_write_r+0x20>)
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	2200      	movs	r2, #0
 8004eac:	602a      	str	r2, [r5, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f7ff fc99 	bl	80047e6 <_write>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_write_r+0x1e>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_write_r+0x1e>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	20025c04 	.word	0x20025c04

08004ec4 <__errno>:
 8004ec4:	4b01      	ldr	r3, [pc, #4]	; (8004ecc <__errno+0x8>)
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	2000007c 	.word	0x2000007c

08004ed0 <__libc_init_array>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	4d0d      	ldr	r5, [pc, #52]	; (8004f08 <__libc_init_array+0x38>)
 8004ed4:	4c0d      	ldr	r4, [pc, #52]	; (8004f0c <__libc_init_array+0x3c>)
 8004ed6:	1b64      	subs	r4, r4, r5
 8004ed8:	10a4      	asrs	r4, r4, #2
 8004eda:	2600      	movs	r6, #0
 8004edc:	42a6      	cmp	r6, r4
 8004ede:	d109      	bne.n	8004ef4 <__libc_init_array+0x24>
 8004ee0:	4d0b      	ldr	r5, [pc, #44]	; (8004f10 <__libc_init_array+0x40>)
 8004ee2:	4c0c      	ldr	r4, [pc, #48]	; (8004f14 <__libc_init_array+0x44>)
 8004ee4:	f000 f920 	bl	8005128 <_init>
 8004ee8:	1b64      	subs	r4, r4, r5
 8004eea:	10a4      	asrs	r4, r4, #2
 8004eec:	2600      	movs	r6, #0
 8004eee:	42a6      	cmp	r6, r4
 8004ef0:	d105      	bne.n	8004efe <__libc_init_array+0x2e>
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}
 8004ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef8:	4798      	blx	r3
 8004efa:	3601      	adds	r6, #1
 8004efc:	e7ee      	b.n	8004edc <__libc_init_array+0xc>
 8004efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f02:	4798      	blx	r3
 8004f04:	3601      	adds	r6, #1
 8004f06:	e7f2      	b.n	8004eee <__libc_init_array+0x1e>
 8004f08:	08006440 	.word	0x08006440
 8004f0c:	08006440 	.word	0x08006440
 8004f10:	08006440 	.word	0x08006440
 8004f14:	08006444 	.word	0x08006444

08004f18 <__retarget_lock_acquire_recursive>:
 8004f18:	4770      	bx	lr

08004f1a <__retarget_lock_release_recursive>:
 8004f1a:	4770      	bx	lr

08004f1c <_free_r>:
 8004f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	d044      	beq.n	8004fac <_free_r+0x90>
 8004f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f26:	9001      	str	r0, [sp, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8004f2e:	bfb8      	it	lt
 8004f30:	18e4      	addlt	r4, r4, r3
 8004f32:	f000 f83f 	bl	8004fb4 <__malloc_lock>
 8004f36:	4a1e      	ldr	r2, [pc, #120]	; (8004fb0 <_free_r+0x94>)
 8004f38:	9801      	ldr	r0, [sp, #4]
 8004f3a:	6813      	ldr	r3, [r2, #0]
 8004f3c:	b933      	cbnz	r3, 8004f4c <_free_r+0x30>
 8004f3e:	6063      	str	r3, [r4, #4]
 8004f40:	6014      	str	r4, [r2, #0]
 8004f42:	b003      	add	sp, #12
 8004f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f48:	f000 b83a 	b.w	8004fc0 <__malloc_unlock>
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	d908      	bls.n	8004f62 <_free_r+0x46>
 8004f50:	6825      	ldr	r5, [r4, #0]
 8004f52:	1961      	adds	r1, r4, r5
 8004f54:	428b      	cmp	r3, r1
 8004f56:	bf01      	itttt	eq
 8004f58:	6819      	ldreq	r1, [r3, #0]
 8004f5a:	685b      	ldreq	r3, [r3, #4]
 8004f5c:	1949      	addeq	r1, r1, r5
 8004f5e:	6021      	streq	r1, [r4, #0]
 8004f60:	e7ed      	b.n	8004f3e <_free_r+0x22>
 8004f62:	461a      	mov	r2, r3
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	b10b      	cbz	r3, 8004f6c <_free_r+0x50>
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d9fa      	bls.n	8004f62 <_free_r+0x46>
 8004f6c:	6811      	ldr	r1, [r2, #0]
 8004f6e:	1855      	adds	r5, r2, r1
 8004f70:	42a5      	cmp	r5, r4
 8004f72:	d10b      	bne.n	8004f8c <_free_r+0x70>
 8004f74:	6824      	ldr	r4, [r4, #0]
 8004f76:	4421      	add	r1, r4
 8004f78:	1854      	adds	r4, r2, r1
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	6011      	str	r1, [r2, #0]
 8004f7e:	d1e0      	bne.n	8004f42 <_free_r+0x26>
 8004f80:	681c      	ldr	r4, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	6053      	str	r3, [r2, #4]
 8004f86:	440c      	add	r4, r1
 8004f88:	6014      	str	r4, [r2, #0]
 8004f8a:	e7da      	b.n	8004f42 <_free_r+0x26>
 8004f8c:	d902      	bls.n	8004f94 <_free_r+0x78>
 8004f8e:	230c      	movs	r3, #12
 8004f90:	6003      	str	r3, [r0, #0]
 8004f92:	e7d6      	b.n	8004f42 <_free_r+0x26>
 8004f94:	6825      	ldr	r5, [r4, #0]
 8004f96:	1961      	adds	r1, r4, r5
 8004f98:	428b      	cmp	r3, r1
 8004f9a:	bf04      	itt	eq
 8004f9c:	6819      	ldreq	r1, [r3, #0]
 8004f9e:	685b      	ldreq	r3, [r3, #4]
 8004fa0:	6063      	str	r3, [r4, #4]
 8004fa2:	bf04      	itt	eq
 8004fa4:	1949      	addeq	r1, r1, r5
 8004fa6:	6021      	streq	r1, [r4, #0]
 8004fa8:	6054      	str	r4, [r2, #4]
 8004faa:	e7ca      	b.n	8004f42 <_free_r+0x26>
 8004fac:	b003      	add	sp, #12
 8004fae:	bd30      	pop	{r4, r5, pc}
 8004fb0:	20025c0c 	.word	0x20025c0c

08004fb4 <__malloc_lock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__malloc_lock+0x8>)
 8004fb6:	f7ff bfaf 	b.w	8004f18 <__retarget_lock_acquire_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20025c08 	.word	0x20025c08

08004fc0 <__malloc_unlock>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__malloc_unlock+0x8>)
 8004fc2:	f7ff bfaa 	b.w	8004f1a <__retarget_lock_release_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20025c08 	.word	0x20025c08

08004fcc <__sflush_r>:
 8004fcc:	898a      	ldrh	r2, [r1, #12]
 8004fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	0710      	lsls	r0, r2, #28
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	d458      	bmi.n	800508c <__sflush_r+0xc0>
 8004fda:	684b      	ldr	r3, [r1, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	dc05      	bgt.n	8004fec <__sflush_r+0x20>
 8004fe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	dc02      	bgt.n	8004fec <__sflush_r+0x20>
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d0f9      	beq.n	8004fe6 <__sflush_r+0x1a>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ff8:	682f      	ldr	r7, [r5, #0]
 8004ffa:	6a21      	ldr	r1, [r4, #32]
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	d032      	beq.n	8005066 <__sflush_r+0x9a>
 8005000:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	075a      	lsls	r2, r3, #29
 8005006:	d505      	bpl.n	8005014 <__sflush_r+0x48>
 8005008:	6863      	ldr	r3, [r4, #4]
 800500a:	1ac0      	subs	r0, r0, r3
 800500c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800500e:	b10b      	cbz	r3, 8005014 <__sflush_r+0x48>
 8005010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005012:	1ac0      	subs	r0, r0, r3
 8005014:	2300      	movs	r3, #0
 8005016:	4602      	mov	r2, r0
 8005018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800501a:	6a21      	ldr	r1, [r4, #32]
 800501c:	4628      	mov	r0, r5
 800501e:	47b0      	blx	r6
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	d106      	bne.n	8005034 <__sflush_r+0x68>
 8005026:	6829      	ldr	r1, [r5, #0]
 8005028:	291d      	cmp	r1, #29
 800502a:	d82b      	bhi.n	8005084 <__sflush_r+0xb8>
 800502c:	4a29      	ldr	r2, [pc, #164]	; (80050d4 <__sflush_r+0x108>)
 800502e:	410a      	asrs	r2, r1
 8005030:	07d6      	lsls	r6, r2, #31
 8005032:	d427      	bmi.n	8005084 <__sflush_r+0xb8>
 8005034:	2200      	movs	r2, #0
 8005036:	6062      	str	r2, [r4, #4]
 8005038:	04d9      	lsls	r1, r3, #19
 800503a:	6922      	ldr	r2, [r4, #16]
 800503c:	6022      	str	r2, [r4, #0]
 800503e:	d504      	bpl.n	800504a <__sflush_r+0x7e>
 8005040:	1c42      	adds	r2, r0, #1
 8005042:	d101      	bne.n	8005048 <__sflush_r+0x7c>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b903      	cbnz	r3, 800504a <__sflush_r+0x7e>
 8005048:	6560      	str	r0, [r4, #84]	; 0x54
 800504a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800504c:	602f      	str	r7, [r5, #0]
 800504e:	2900      	cmp	r1, #0
 8005050:	d0c9      	beq.n	8004fe6 <__sflush_r+0x1a>
 8005052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005056:	4299      	cmp	r1, r3
 8005058:	d002      	beq.n	8005060 <__sflush_r+0x94>
 800505a:	4628      	mov	r0, r5
 800505c:	f7ff ff5e 	bl	8004f1c <_free_r>
 8005060:	2000      	movs	r0, #0
 8005062:	6360      	str	r0, [r4, #52]	; 0x34
 8005064:	e7c0      	b.n	8004fe8 <__sflush_r+0x1c>
 8005066:	2301      	movs	r3, #1
 8005068:	4628      	mov	r0, r5
 800506a:	47b0      	blx	r6
 800506c:	1c41      	adds	r1, r0, #1
 800506e:	d1c8      	bne.n	8005002 <__sflush_r+0x36>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0c5      	beq.n	8005002 <__sflush_r+0x36>
 8005076:	2b1d      	cmp	r3, #29
 8005078:	d001      	beq.n	800507e <__sflush_r+0xb2>
 800507a:	2b16      	cmp	r3, #22
 800507c:	d101      	bne.n	8005082 <__sflush_r+0xb6>
 800507e:	602f      	str	r7, [r5, #0]
 8005080:	e7b1      	b.n	8004fe6 <__sflush_r+0x1a>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	e7ad      	b.n	8004fe8 <__sflush_r+0x1c>
 800508c:	690f      	ldr	r7, [r1, #16]
 800508e:	2f00      	cmp	r7, #0
 8005090:	d0a9      	beq.n	8004fe6 <__sflush_r+0x1a>
 8005092:	0793      	lsls	r3, r2, #30
 8005094:	680e      	ldr	r6, [r1, #0]
 8005096:	bf08      	it	eq
 8005098:	694b      	ldreq	r3, [r1, #20]
 800509a:	600f      	str	r7, [r1, #0]
 800509c:	bf18      	it	ne
 800509e:	2300      	movne	r3, #0
 80050a0:	eba6 0807 	sub.w	r8, r6, r7
 80050a4:	608b      	str	r3, [r1, #8]
 80050a6:	f1b8 0f00 	cmp.w	r8, #0
 80050aa:	dd9c      	ble.n	8004fe6 <__sflush_r+0x1a>
 80050ac:	6a21      	ldr	r1, [r4, #32]
 80050ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050b0:	4643      	mov	r3, r8
 80050b2:	463a      	mov	r2, r7
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b0      	blx	r6
 80050b8:	2800      	cmp	r0, #0
 80050ba:	dc06      	bgt.n	80050ca <__sflush_r+0xfe>
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	e78e      	b.n	8004fe8 <__sflush_r+0x1c>
 80050ca:	4407      	add	r7, r0
 80050cc:	eba8 0800 	sub.w	r8, r8, r0
 80050d0:	e7e9      	b.n	80050a6 <__sflush_r+0xda>
 80050d2:	bf00      	nop
 80050d4:	dfbffffe 	.word	0xdfbffffe

080050d8 <_fflush_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	690b      	ldr	r3, [r1, #16]
 80050dc:	4605      	mov	r5, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	b913      	cbnz	r3, 80050e8 <_fflush_r+0x10>
 80050e2:	2500      	movs	r5, #0
 80050e4:	4628      	mov	r0, r5
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	b118      	cbz	r0, 80050f2 <_fflush_r+0x1a>
 80050ea:	6a03      	ldr	r3, [r0, #32]
 80050ec:	b90b      	cbnz	r3, 80050f2 <_fflush_r+0x1a>
 80050ee:	f7ff fe21 	bl	8004d34 <__sinit>
 80050f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f3      	beq.n	80050e2 <_fflush_r+0xa>
 80050fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050fc:	07d0      	lsls	r0, r2, #31
 80050fe:	d404      	bmi.n	800510a <_fflush_r+0x32>
 8005100:	0599      	lsls	r1, r3, #22
 8005102:	d402      	bmi.n	800510a <_fflush_r+0x32>
 8005104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005106:	f7ff ff07 	bl	8004f18 <__retarget_lock_acquire_recursive>
 800510a:	4628      	mov	r0, r5
 800510c:	4621      	mov	r1, r4
 800510e:	f7ff ff5d 	bl	8004fcc <__sflush_r>
 8005112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005114:	07da      	lsls	r2, r3, #31
 8005116:	4605      	mov	r5, r0
 8005118:	d4e4      	bmi.n	80050e4 <_fflush_r+0xc>
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	059b      	lsls	r3, r3, #22
 800511e:	d4e1      	bmi.n	80050e4 <_fflush_r+0xc>
 8005120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005122:	f7ff fefa 	bl	8004f1a <__retarget_lock_release_recursive>
 8005126:	e7dd      	b.n	80050e4 <_fflush_r+0xc>

08005128 <_init>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr

08005134 <_fini>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	bf00      	nop
 8005138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513a:	bc08      	pop	{r3}
 800513c:	469e      	mov	lr, r3
 800513e:	4770      	bx	lr
